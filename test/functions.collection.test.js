"use strict";
const collection = require("../functions/models/collection");
const wishlist = require("../functions/models/wishlist");
const collectionManager = require("../functions/dataManager/collectionManager");
const collectionErrorHandler = require("../functions/error/collectionErrorHandler");
const gameObject = require("../functions/models/game");
const gameDAO = require("../functions/dataManager/gameManager");
const priceDataManager = require("../functions/dataManager/priceChartingDataManager");
const gamePriceData = require("../functions/models/gamePriceData");
const Interfaces = require("../functions/shared/interfaces/interfaces");
const gamePriceDAO = require("../functions/dataManager/gamePriceDataManager");
const gameCommon = require("../functions/shared/common/game");
test("Add Game to Wishlist", async () => {
    let inputData = {
        collectionID: '2',
        gameName: 'Super Mario',
        yearReleased: 1992,
        genre: 'Action-Adventure',
        console: 'Nintendo 64',
        developer: 'Nintendo'
    };
    let userData = {
        userID: 'erikchaulk',
        email: 'erikchaulk@gmail.com'
    };
    let gameID = '987654';
    let itemType = '[CollectionItem]#[Wishlist]#[GameItem]';
    let testGame = new gameObject.Game(gameID, userData.userID, userData.email, inputData.gameName, itemType, inputData.collectionID, inputData.yearReleased, inputData.genre, inputData.console, inputData.developer);
    let testWishlist = new wishlist.Wishlist(userData.userID, inputData.collectionID);
    let response = await collectionManager.addGameToCollection(testGame, testWishlist);
    expect(response).toEqual([testGame]);
});
test("removeGameFromCollection", async () => {
    let inputData = {
        collectionID: '2',
        gameName: 'Super Mario',
        yearReleased: 1992,
        genre: 'Action-Adventure',
        console: 'Nintendo 64',
        developer: 'Nintendo'
    };
    let inputDataForSecondGame = {
        collectionID: '2',
        gameName: 'Overwatch',
        yearReleased: 2016,
        genre: 'First-Person Shooter',
        console: 'PC',
        developer: 'Blizzard'
    };
    let userData = {
        userID: 'erikchaulk',
        email: 'erikchaulk@gmail.com'
    };
    let gameID = '987654';
    let secondGameID = '667788';
    let itemType = '[CollectionItem]#[Wishlist]#[GameItem]';
    let testGame = new gameObject.Game(gameID, userData.userID, userData.email, inputData.gameName, itemType, inputData.collectionID, inputData.yearReleased, inputData.genre, inputData.console, inputData.developer);
    let secondTestGame = new gameObject.Game(secondGameID, userData.userID, userData.email, inputDataForSecondGame.gameName, itemType, inputDataForSecondGame.collectionID, inputDataForSecondGame.yearReleased, inputDataForSecondGame.genre, inputDataForSecondGame.console, inputDataForSecondGame.developer);
    let testWishlist = new wishlist.Wishlist(userData.userID, inputDataForSecondGame.collectionID);
    await collectionManager.addGameToCollection(secondTestGame, testWishlist);
    let response = await collectionManager.removeGameFromCollection(secondTestGame, testWishlist);
    expect(response).toEqual([testGame]);
});
test("modifyGameInCollection", async () => {
    let inputData = {
        collectionID: '2',
        gameName: 'Super Mario',
        yearReleased: 1993,
        genre: 'Action-Adventure',
        console: 'Nintendo 64',
        developer: 'Nintendo'
    };
    let userData = {
        userID: 'erikchaulk',
        email: 'erikchaulk@gmail.com'
    };
    let gameID = '987654';
    let itemType = '[CollectionItem]#[Wishlist]#[GameItem]';
    let testGame = new gameObject.Game(gameID, userData.userID, userData.email, inputData.gameName, itemType, inputData.collectionID, inputData.yearReleased, inputData.genre, inputData.console, inputData.developer);
    let testWishlist = new wishlist.Wishlist(userData.userID, inputData.collectionID);
    let response = await collectionManager.modifyGameInCollection(testGame, testWishlist);
    expect(response).toEqual([testGame]);
});
test("getGameInCollection", async () => {
    let inputData = {
        collectionID: '2',
        gameName: 'Super Mario',
        yearReleased: 1993,
        genre: 'Action-Adventure',
        console: 'Nintendo 64',
        developer: 'Nintendo'
    };
    let userData = {
        userID: 'erikchaulk',
        email: 'erikchaulk@gmail.com'
    };
    let gameID = '987654';
    let itemType = '[CollectionItem]#[Wishlist]#[GameItem]';
    let testGame = new gameObject.Game(gameID, userData.userID, userData.email, inputData.gameName, itemType, inputData.collectionID, inputData.yearReleased, inputData.genre, inputData.console, inputData.developer);
    let testWishlist = new wishlist.Wishlist(userData.userID, inputData.collectionID);
    let response = await collectionManager.getGameInCollection(testGame, testWishlist);
    expect(response).toEqual(testGame);
});
test("collectionError", async () => {
    let collectionError = new collectionErrorHandler.CollectionError("Game not found in the collection.");
    expect(collectionError.message).toEqual('Collection error, datastore response: Game not found in the collection.');
});
test("getAllGamesInCollection", async () => {
    let inputData = {
        collectionID: '2',
        gameName: 'Super Mario',
        yearReleased: 1993,
        genre: 'Action-Adventure',
        console: 'Nintendo 64',
        developer: 'Nintendo'
    };
    let userData = {
        userID: 'erikchaulk',
        email: 'erikchaulk@gmail.com'
    };
    let gameID = '987654';
    let itemType = '[CollectionItem]#[Wishlist]#[GameItem]';
    let testGame = new gameObject.Game(gameID, userData.userID, userData.email, inputData.gameName, itemType, inputData.collectionID, inputData.yearReleased, inputData.genre, inputData.console, inputData.developer);
    let testWishlist = new wishlist.Wishlist(userData.userID, inputData.collectionID);
    let response = await collectionManager.getAllGamesInCollection(testWishlist);
    expect(response).toEqual([testGame]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLmNvbGxlY3Rpb24udGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZ1bmN0aW9ucy5jb2xsZWN0aW9uLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzdELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ3pELE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDaEYsTUFBTSxzQkFBc0IsR0FBRyxPQUFPLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNwRixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN2RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUNoRSxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQ3RGLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQzlFLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBRTlELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNwQyxJQUFJLFNBQVMsR0FBRztRQUNaLFlBQVksRUFBRSxHQUFHO1FBQ2pCLFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLFlBQVksRUFBRSxJQUFJO1FBQ2xCLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsU0FBUyxFQUFFLFVBQVU7S0FDeEIsQ0FBQTtJQUNELElBQUksUUFBUSxHQUFHO1FBQ1gsTUFBTSxF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QUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbGxlY3Rpb24gPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL21vZGVscy9jb2xsZWN0aW9uXCIpO1xyXG5jb25zdCB3aXNobGlzdCA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvbW9kZWxzL3dpc2hsaXN0XCIpO1xyXG5jb25zdCBjb2xsZWN0aW9uTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvZGF0YU1hbmFnZXIvY29sbGVjdGlvbk1hbmFnZXJcIik7XHJcbmNvbnN0IGNvbGxlY3Rpb25FcnJvckhhbmRsZXIgPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL2Vycm9yL2NvbGxlY3Rpb25FcnJvckhhbmRsZXJcIik7XHJcbmNvbnN0IGdhbWVPYmplY3QgPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL21vZGVscy9nYW1lXCIpO1xyXG5jb25zdCBnYW1lREFPID0gcmVxdWlyZShcIi4uL2Z1bmN0aW9ucy9kYXRhTWFuYWdlci9nYW1lTWFuYWdlclwiKTtcclxuY29uc3QgcHJpY2VEYXRhTWFuYWdlciA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvZGF0YU1hbmFnZXIvcHJpY2VDaGFydGluZ0RhdGFNYW5hZ2VyXCIpO1xyXG5jb25zdCBnYW1lUHJpY2VEYXRhID0gcmVxdWlyZShcIi4uL2Z1bmN0aW9ucy9tb2RlbHMvZ2FtZVByaWNlRGF0YVwiKTtcclxuY29uc3QgSW50ZXJmYWNlcyA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvc2hhcmVkL2ludGVyZmFjZXMvaW50ZXJmYWNlc1wiKTtcclxuY29uc3QgZ2FtZVByaWNlREFPID0gcmVxdWlyZShcIi4uL2Z1bmN0aW9ucy9kYXRhTWFuYWdlci9nYW1lUHJpY2VEYXRhTWFuYWdlclwiKTtcclxuY29uc3QgZ2FtZUNvbW1vbiA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvc2hhcmVkL2NvbW1vbi9nYW1lXCIpO1xyXG5cclxudGVzdChcIkFkZCBHYW1lIHRvIFdpc2hsaXN0XCIsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBpbnB1dERhdGEgPSB7XHJcbiAgICAgICAgY29sbGVjdGlvbklEOiAnMicsXHJcbiAgICAgICAgZ2FtZU5hbWU6ICdTdXBlciBNYXJpbycsXHJcbiAgICAgICAgeWVhclJlbGVhc2VkOiAxOTkyLFxyXG4gICAgICAgIGdlbnJlOiAnQWN0aW9uLUFkdmVudHVyZScsXHJcbiAgICAgICAgY29uc29sZTogJ05pbnRlbmRvIDY0JyxcclxuICAgICAgICBkZXZlbG9wZXI6ICdOaW50ZW5kbydcclxuICAgIH1cclxuICAgIGxldCB1c2VyRGF0YSA9IHtcclxuICAgICAgICB1c2VySUQ6ICdlcmlrY2hhdWxrJyxcclxuICAgICAgICBlbWFpbDogJ2VyaWtjaGF1bGtAZ21haWwuY29tJ1xyXG4gICAgfTtcclxuICAgIGxldCBnYW1lSUQgPSAnOTg3NjU0J1xyXG4gICAgbGV0IGl0ZW1UeXBlID0gJ1tDb2xsZWN0aW9uSXRlbV0jW1dpc2hsaXN0XSNbR2FtZUl0ZW1dJztcclxuICAgIGxldCB0ZXN0R2FtZSA9IG5ldyBnYW1lT2JqZWN0LkdhbWUoZ2FtZUlELCB1c2VyRGF0YS51c2VySUQsIHVzZXJEYXRhLmVtYWlsLCBpbnB1dERhdGEuZ2FtZU5hbWUsIGl0ZW1UeXBlLCBpbnB1dERhdGEuY29sbGVjdGlvbklELCBpbnB1dERhdGEueWVhclJlbGVhc2VkLCBpbnB1dERhdGEuZ2VucmUsIGlucHV0RGF0YS5jb25zb2xlLCBpbnB1dERhdGEuZGV2ZWxvcGVyKTtcclxuICAgIGxldCB0ZXN0V2lzaGxpc3QgPSBuZXcgd2lzaGxpc3QuV2lzaGxpc3QodXNlckRhdGEudXNlcklELCBpbnB1dERhdGEuY29sbGVjdGlvbklEKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGNvbGxlY3Rpb25NYW5hZ2VyLmFkZEdhbWVUb0NvbGxlY3Rpb24odGVzdEdhbWUsIHRlc3RXaXNobGlzdCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoW3Rlc3RHYW1lXSk7XHJcbn0pO1xyXG5cclxudGVzdChcInJlbW92ZUdhbWVGcm9tQ29sbGVjdGlvblwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgaW5wdXREYXRhID0ge1xyXG4gICAgICAgIGNvbGxlY3Rpb25JRDogJzInLFxyXG4gICAgICAgIGdhbWVOYW1lOiAnU3VwZXIgTWFyaW8nLFxyXG4gICAgICAgIHllYXJSZWxlYXNlZDogMTk5MixcclxuICAgICAgICBnZW5yZTogJ0FjdGlvbi1BZHZlbnR1cmUnLFxyXG4gICAgICAgIGNvbnNvbGU6ICdOaW50ZW5kbyA2NCcsXHJcbiAgICAgICAgZGV2ZWxvcGVyOiAnTmludGVuZG8nXHJcbiAgICB9XHJcbiAgICBsZXQgaW5wdXREYXRhRm9yU2Vjb25kR2FtZSA9IHtcclxuICAgICAgICBjb2xsZWN0aW9uSUQ6ICcyJyxcclxuICAgICAgICBnYW1lTmFtZTogJ092ZXJ3YXRjaCcsXHJcbiAgICAgICAgeWVhclJlbGVhc2VkOiAyMDE2LFxyXG4gICAgICAgIGdlbnJlOiAnRmlyc3QtUGVyc29uIFNob290ZXInLFxyXG4gICAgICAgIGNvbnNvbGU6ICdQQycsXHJcbiAgICAgICAgZGV2ZWxvcGVyOiAnQmxpenphcmQnXHJcbiAgICB9XHJcbiAgICBsZXQgdXNlckRhdGEgPSB7XHJcbiAgICAgICAgdXNlcklEOiAnZXJpa2NoYXVsaycsXHJcbiAgICAgICAgZW1haWw6ICdlcmlrY2hhdWxrQGdtYWlsLmNvbSdcclxuICAgIH07XHJcbiAgICBsZXQgZ2FtZUlEID0gJzk4NzY1NCc7XHJcbiAgICBsZXQgc2Vjb25kR2FtZUlEID0gJzY2Nzc4OCc7XHJcbiAgICBsZXQgaXRlbVR5cGUgPSAnW0NvbGxlY3Rpb25JdGVtXSNbV2lzaGxpc3RdI1tHYW1lSXRlbV0nO1xyXG4gICAgbGV0IHRlc3RHYW1lID0gbmV3IGdhbWVPYmplY3QuR2FtZShnYW1lSUQsIHVzZXJEYXRhLnVzZXJJRCwgdXNlckRhdGEuZW1haWwsIGlucHV0RGF0YS5nYW1lTmFtZSwgaXRlbVR5cGUsIGlucHV0RGF0YS5jb2xsZWN0aW9uSUQsIGlucHV0RGF0YS55ZWFyUmVsZWFzZWQsIGlucHV0RGF0YS5nZW5yZSwgaW5wdXREYXRhLmNvbnNvbGUsIGlucHV0RGF0YS5kZXZlbG9wZXIpO1xyXG4gICAgbGV0IHNlY29uZFRlc3RHYW1lID0gbmV3IGdhbWVPYmplY3QuR2FtZShzZWNvbmRHYW1lSUQsIHVzZXJEYXRhLnVzZXJJRCwgdXNlckRhdGEuZW1haWwsIGlucHV0RGF0YUZvclNlY29uZEdhbWUuZ2FtZU5hbWUsIGl0ZW1UeXBlLCBpbnB1dERhdGFGb3JTZWNvbmRHYW1lLmNvbGxlY3Rpb25JRCwgaW5wdXREYXRhRm9yU2Vjb25kR2FtZS55ZWFyUmVsZWFzZWQsIGlucHV0RGF0YUZvclNlY29uZEdhbWUuZ2VucmUsIGlucHV0RGF0YUZvclNlY29uZEdhbWUuY29uc29sZSwgaW5wdXREYXRhRm9yU2Vjb25kR2FtZS5kZXZlbG9wZXIpO1xyXG4gICAgbGV0IHRlc3RXaXNobGlzdCA9IG5ldyB3aXNobGlzdC5XaXNobGlzdCh1c2VyRGF0YS51c2VySUQsIGlucHV0RGF0YUZvclNlY29uZEdhbWUuY29sbGVjdGlvbklEKTtcclxuICAgIGF3YWl0IGNvbGxlY3Rpb25NYW5hZ2VyLmFkZEdhbWVUb0NvbGxlY3Rpb24oc2Vjb25kVGVzdEdhbWUsIHRlc3RXaXNobGlzdCk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBjb2xsZWN0aW9uTWFuYWdlci5yZW1vdmVHYW1lRnJvbUNvbGxlY3Rpb24oc2Vjb25kVGVzdEdhbWUsIHRlc3RXaXNobGlzdCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoW3Rlc3RHYW1lXSk7XHJcbn0pO1xyXG5cclxudGVzdChcIm1vZGlmeUdhbWVJbkNvbGxlY3Rpb25cIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGlucHV0RGF0YSA9IHtcclxuICAgICAgICBjb2xsZWN0aW9uSUQ6ICcyJyxcclxuICAgICAgICBnYW1lTmFtZTogJ1N1cGVyIE1hcmlvJyxcclxuICAgICAgICB5ZWFyUmVsZWFzZWQ6IDE5OTMsXHJcbiAgICAgICAgZ2VucmU6ICdBY3Rpb24tQWR2ZW50dXJlJyxcclxuICAgICAgICBjb25zb2xlOiAnTmludGVuZG8gNjQnLFxyXG4gICAgICAgIGRldmVsb3BlcjogJ05pbnRlbmRvJ1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgdXNlckRhdGEgPSB7XHJcbiAgICAgICAgdXNlcklEOiAnZXJpa2NoYXVsaycsXHJcbiAgICAgICAgZW1haWw6ICdlcmlrY2hhdWxrQGdtYWlsLmNvbSdcclxuICAgIH07XHJcbiAgICBsZXQgZ2FtZUlEID0gJzk4NzY1NCdcclxuICAgIGxldCBpdGVtVHlwZSA9ICdbQ29sbGVjdGlvbkl0ZW1dI1tXaXNobGlzdF0jW0dhbWVJdGVtXSc7XHJcbiAgICBsZXQgdGVzdEdhbWUgPSBuZXcgZ2FtZU9iamVjdC5HYW1lKGdhbWVJRCwgdXNlckRhdGEudXNlcklELCB1c2VyRGF0YS5lbWFpbCwgaW5wdXREYXRhLmdhbWVOYW1lLCBpdGVtVHlwZSwgaW5wdXREYXRhLmNvbGxlY3Rpb25JRCwgaW5wdXREYXRhLnllYXJSZWxlYXNlZCwgaW5wdXREYXRhLmdlbnJlLCBpbnB1dERhdGEuY29uc29sZSwgaW5wdXREYXRhLmRldmVsb3Blcik7XHJcbiAgICBsZXQgdGVzdFdpc2hsaXN0ID0gbmV3IHdpc2hsaXN0Lldpc2hsaXN0KHVzZXJEYXRhLnVzZXJJRCwgaW5wdXREYXRhLmNvbGxlY3Rpb25JRCk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBjb2xsZWN0aW9uTWFuYWdlci5tb2RpZnlHYW1lSW5Db2xsZWN0aW9uKHRlc3RHYW1lLCB0ZXN0V2lzaGxpc3QpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKFt0ZXN0R2FtZV0pO1xyXG59KTtcclxuXHJcbnRlc3QoXCJnZXRHYW1lSW5Db2xsZWN0aW9uXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBpbnB1dERhdGEgPSB7XHJcbiAgICAgICAgY29sbGVjdGlvbklEOiAnMicsXHJcbiAgICAgICAgZ2FtZU5hbWU6ICdTdXBlciBNYXJpbycsXHJcbiAgICAgICAgeWVhclJlbGVhc2VkOiAxOTkzLFxyXG4gICAgICAgIGdlbnJlOiAnQWN0aW9uLUFkdmVudHVyZScsXHJcbiAgICAgICAgY29uc29sZTogJ05pbnRlbmRvIDY0JyxcclxuICAgICAgICBkZXZlbG9wZXI6ICdOaW50ZW5kbydcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGV0IHVzZXJEYXRhID0ge1xyXG4gICAgICAgIHVzZXJJRDogJ2VyaWtjaGF1bGsnLFxyXG4gICAgICAgIGVtYWlsOiAnZXJpa2NoYXVsa0BnbWFpbC5jb20nXHJcbiAgICB9O1xyXG4gICAgbGV0IGdhbWVJRCA9ICc5ODc2NTQnXHJcbiAgICBsZXQgaXRlbVR5cGUgPSAnW0NvbGxlY3Rpb25JdGVtXSNbV2lzaGxpc3RdI1tHYW1lSXRlbV0nO1xyXG4gICAgbGV0IHRlc3RHYW1lID0gbmV3IGdhbWVPYmplY3QuR2FtZShnYW1lSUQsIHVzZXJEYXRhLnVzZXJJRCwgdXNlckRhdGEuZW1haWwsIGlucHV0RGF0YS5nYW1lTmFtZSwgaXRlbVR5cGUsIGlucHV0RGF0YS5jb2xsZWN0aW9uSUQsIGlucHV0RGF0YS55ZWFyUmVsZWFzZWQsIGlucHV0RGF0YS5nZW5yZSwgaW5wdXREYXRhLmNvbnNvbGUsIGlucHV0RGF0YS5kZXZlbG9wZXIpO1xyXG4gICAgbGV0IHRlc3RXaXNobGlzdCA9IG5ldyB3aXNobGlzdC5XaXNobGlzdCh1c2VyRGF0YS51c2VySUQsIGlucHV0RGF0YS5jb2xsZWN0aW9uSUQpO1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgY29sbGVjdGlvbk1hbmFnZXIuZ2V0R2FtZUluQ29sbGVjdGlvbih0ZXN0R2FtZSwgdGVzdFdpc2hsaXN0KTtcclxuICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh0ZXN0R2FtZSk7XHJcbn0pO1xyXG5cclxudGVzdChcImNvbGxlY3Rpb25FcnJvclwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgY29sbGVjdGlvbkVycm9yID0gbmV3IGNvbGxlY3Rpb25FcnJvckhhbmRsZXIuQ29sbGVjdGlvbkVycm9yKFwiR2FtZSBub3QgZm91bmQgaW4gdGhlIGNvbGxlY3Rpb24uXCIpO1xyXG4gICAgZXhwZWN0KGNvbGxlY3Rpb25FcnJvci5tZXNzYWdlKS50b0VxdWFsKCdDb2xsZWN0aW9uIGVycm9yLCBkYXRhc3RvcmUgcmVzcG9uc2U6IEdhbWUgbm90IGZvdW5kIGluIHRoZSBjb2xsZWN0aW9uLicpO1xyXG59KTtcclxuXHJcbnRlc3QoXCJnZXRBbGxHYW1lc0luQ29sbGVjdGlvblwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgaW5wdXREYXRhID0ge1xyXG4gICAgICAgIGNvbGxlY3Rpb25JRDogJzInLFxyXG4gICAgICAgIGdhbWVOYW1lOiAnU3VwZXIgTWFyaW8nLFxyXG4gICAgICAgIHllYXJSZWxlYXNlZDogMTk5MyxcclxuICAgICAgICBnZW5yZTogJ0FjdGlvbi1BZHZlbnR1cmUnLFxyXG4gICAgICAgIGNvbnNvbGU6ICdOaW50ZW5kbyA2NCcsXHJcbiAgICAgICAgZGV2ZWxvcGVyOiAnTmludGVuZG8nXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxldCB1c2VyRGF0YSA9IHtcclxuICAgICAgICB1c2VySUQ6ICdlcmlrY2hhdWxrJyxcclxuICAgICAgICBlbWFpbDogJ2VyaWtjaGF1bGtAZ21haWwuY29tJ1xyXG4gICAgfTtcclxuICAgIGxldCBnYW1lSUQgPSAnOTg3NjU0J1xyXG4gICAgbGV0IGl0ZW1UeXBlID0gJ1tDb2xsZWN0aW9uSXRlbV0jW1dpc2hsaXN0XSNbR2FtZUl0ZW1dJztcclxuICAgIGxldCB0ZXN0R2FtZSA9IG5ldyBnYW1lT2JqZWN0LkdhbWUoZ2FtZUlELCB1c2VyRGF0YS51c2VySUQsIHVzZXJEYXRhLmVtYWlsLCBpbnB1dERhdGEuZ2FtZU5hbWUsIGl0ZW1UeXBlLCBpbnB1dERhdGEuY29sbGVjdGlvbklELCBpbnB1dERhdGEueWVhclJlbGVhc2VkLCBpbnB1dERhdGEuZ2VucmUsIGlucHV0RGF0YS5jb25zb2xlLCBpbnB1dERhdGEuZGV2ZWxvcGVyKTtcclxuICAgIGxldCB0ZXN0V2lzaGxpc3QgPSBuZXcgd2lzaGxpc3QuV2lzaGxpc3QodXNlckRhdGEudXNlcklELCBpbnB1dERhdGEuY29sbGVjdGlvbklEKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGNvbGxlY3Rpb25NYW5hZ2VyLmdldEFsbEdhbWVzSW5Db2xsZWN0aW9uKHRlc3RXaXNobGlzdCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoW3Rlc3RHYW1lXSk7XHJcbn0pOyJdfQ==
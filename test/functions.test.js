"use strict";
const game = require("../functions/game");
const index = require("../functions/index");
test("CreateGame - Success", async () => {
    let data = new game.Game('League of Legends', '2008', 'Moba', 'PC', 'Riot Games');
    let response = await data.CreateGame();
    expect(response).toEqual({
        Item: {
            gameName: 'League of Legends',
            yearReleased: '2008',
            genre: 'Moba',
            console: 'PC',
            developer: 'Riot Games'
        }
    });
});
test("GetGame", async () => {
    let data = new game.Game("League of Legends");
    let response = await game.GetGame(data);
    expect(response).toEqual({
        Item: {
            gameName: "League of Legends",
            yearReleased: '2008',
            genre: 'Moba',
            console: 'PC',
            developer: 'Riot Games'
        }
    });
});
test("ListGames", async () => {
    let response = await game.ListGames();
    expect(response).toEqual({
        Items: [{
                genre: 'Moba',
                console: 'PC',
                developer: 'Riot Games',
                gameName: 'League of Legends',
                yearReleased: '2008',
            }],
        Count: 1,
        ScannedCount: 1
    });
});
test("ModifyGame", async () => {
    let data = new game.Game('League of Legends', '2008', 'Moba', 'PC', 'Riot Games');
    let response = await data.CreateGame();
    data = index.DeserializeGameData({ gameName: 'League of Legends', yearReleased: '2021', genre: 'Strategy' });
    response = await game.ModifyGame(data);
    expect(response).toEqual({
        Attributes: {
            gameName: 'League of Legends',
            yearReleased: '2021',
            genre: 'Strategy',
            console: 'PC',
            developer: 'Riot Games'
        }
    });
});
test("DeleteGame", async () => {
    let data = new game.Game("League of Legends");
    let response = await game.DeleteGame(data);
    expect(response).toEqual({
        Attributes: {
            gameName: "League of Legends",
            yearReleased: '2021',
            genre: 'Strategy',
            console: 'PC',
            developer: 'Riot Games'
        }
    });
});
test("GetGameHttpResponse - 200", async () => {
    let data = new game.Game('League of Legends', '2008', 'Moba', 'PC', 'Riot Games');
    let response = await data.CreateGame();
    data = index.DeserializeGameData({ gameName: 'League of Legends' });
    response = await index.GetGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 200,
        body: JSON.stringify({
            Item: {
                genre: 'Moba',
                console: 'PC',
                developer: 'Riot Games',
                gameName: 'League of Legends',
                yearReleased: '2008',
            }
        }),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("GetGameHttpResponse - 404 - Game doesn't exist", async () => {
    let data = index.DeserializeGameData({ gameName: 'The Witness' });
    let response = await index.GetGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 404,
        body: "Unable to get game.",
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("CreateGameHttpResponse - 201 - Success", async () => {
    let data = new game.Game('Portal 2', '2010', 'Puzzle', 'PC', 'Valve');
    let response = await index.CreateGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 201,
        body: JSON.stringify({
            Item: {
                genre: 'Puzzle',
                console: 'PC',
                developer: 'Valve',
                gameName: 'Portal 2',
                yearReleased: '2010',
            }
        }),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("CreateGameHttpResponse - 400 - Game already exists", async () => {
    let data = new game.Game('Portal 2', '2010', 'Puzzle', 'PC', 'Valve');
    let response = await index.CreateGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 400,
        body: "Error with the provided condition.",
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("ListGamesHttpResponse - 200 - Success", async () => {
    let response = await index.ListGamesHttpResponse();
    expect(response).toEqual({
        statusCode: 200,
        body: JSON.stringify({
            Items: [{
                    genre: 'Puzzle',
                    console: 'PC',
                    developer: 'Valve',
                    gameName: 'Portal 2',
                    yearReleased: '2010',
                },
                {
                    genre: 'Moba',
                    console: 'PC',
                    developer: 'Riot Games',
                    gameName: 'League of Legends',
                    yearReleased: '2008',
                }],
            Count: 2,
            ScannedCount: 2
        }),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("ModifyGameHttpResponse - 200 - Success", async () => {
    let data = new game.Game('Portal 2', '2015', 'First Person Shooter', 'PC', 'Valve');
    let response = await index.ModifyGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 200,
        body: JSON.stringify({
            genre: 'First Person Shooter',
            console: 'PC',
            developer: 'Valve',
            gameName: 'Portal 2',
            yearReleased: '2015',
        }),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("ModifyGameHttpResponse - 400 - Game doesn't exist", async () => {
    let data = new game.Game('Portal 3', '2015', 'First Person Shooter', 'PC', 'Valve');
    let response = await index.ModifyGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 400,
        body: "Error with the provided condition.",
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("DeleteGameHttpResponse - 200 - Success", async () => {
    let data = new game.Game('Portal 2');
    let response = await index.DeleteGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 200,
        body: JSON.stringify({
            Attributes: {
                genre: 'First Person Shooter',
                console: 'PC',
                developer: 'Valve',
                gameName: 'Portal 2',
                yearReleased: "2015",
            }
        }),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("DeleteGameHttpResponse - 400 - Game not found", async () => {
    let data = new game.Game('Portal 2');
    let response = await index.DeleteGameHttpResponse(data);
    expect(response).toEqual({
        statusCode: 404,
        body: "Unable to delete game.",
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("ParseDynamoError - ConditionalCheckFailedException", () => {
    let error = "ConditionalCheckFailedException";
    expect(index.ParseDynamoError(error)).toEqual(index.HttpResponse({ statusCode: 400, body: "Error with the provided condition." }));
});
test("ParseDynamoError - Unhandled dynamoDB error", () => {
    let error = "AccessDeniedException";
    expect(index.ParseDynamoError(error)).toEqual(index.HttpResponse({ statusCode: 400, body: "Invalid operation." }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmdW5jdGlvbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDMUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFNUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3BDLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNsRixJQUFJLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN2QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLElBQUksRUFBRTtZQUNGLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsWUFBWSxFQUFFLE1BQU07WUFDcEIsS0FBSyxFQUFFLE1BQU07WUFDYixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxZQUFZO1NBQzFCO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3ZCLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzlDLElBQUksUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLElBQUksRUFBRTtZQUNGLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsWUFBWSxFQUFFLE1BQU07WUFDcEIsS0FBSyxFQUFFLE1BQU07WUFDYixPQUFP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O1FBQ2YsSUFBSSxFQUFFLHdCQUF3QjtRQUM5QixPQUFPLEVBQUU7WUFDUCw2QkFBNkIsRUFBRSxHQUFHO1NBQ25DO0tBQ0osQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFO0lBQzVELElBQUksS0FBSyxHQUFHLGlDQUFpQyxDQUFBO0lBQzdDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQ3pDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxvQ0FBb0MsRUFBQyxDQUFDLENBQ3BGLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLEVBQUU7SUFDckQsSUFBSSxLQUFLLEdBQUcsdUJBQXVCLENBQUE7SUFDbkMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDekMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFDLENBQUMsQ0FDcEUsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2FtZSA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvZ2FtZVwiKTtcclxuY29uc3QgaW5kZXggPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL2luZGV4XCIpO1xyXG5cclxudGVzdChcIkNyZWF0ZUdhbWUgLSBTdWNjZXNzXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBkYXRhID0gbmV3IGdhbWUuR2FtZSgnTGVhZ3VlIG9mIExlZ2VuZHMnLCAnMjAwOCcsICdNb2JhJywgJ1BDJywgJ1Jpb3QgR2FtZXMnKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGRhdGEuQ3JlYXRlR2FtZSgpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgIGdhbWVOYW1lOiAnTGVhZ3VlIG9mIExlZ2VuZHMnLFxyXG4gICAgICAgICAgICB5ZWFyUmVsZWFzZWQ6ICcyMDA4JywgXHJcbiAgICAgICAgICAgIGdlbnJlOiAnTW9iYScsIFxyXG4gICAgICAgICAgICBjb25zb2xlOiAnUEMnLCBcclxuICAgICAgICAgICAgZGV2ZWxvcGVyOiAnUmlvdCBHYW1lcydcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJHZXRHYW1lXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBkYXRhID0gbmV3IGdhbWUuR2FtZShcIkxlYWd1ZSBvZiBMZWdlbmRzXCIpO1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZ2FtZS5HZXRHYW1lKGRhdGEpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgIGdhbWVOYW1lOiBcIkxlYWd1ZSBvZiBMZWdlbmRzXCIsXHJcbiAgICAgICAgICAgIHllYXJSZWxlYXNlZDogJzIwMDgnLCBcclxuICAgICAgICAgICAgZ2VucmU6ICdNb2JhJywgXHJcbiAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkxpc3RHYW1lc1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBnYW1lLkxpc3RHYW1lcygpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBJdGVtczogW3tcclxuICAgICAgICAgICAgZ2VucmU6ICdNb2JhJywgXHJcbiAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJyxcclxuICAgICAgICAgICAgZ2FtZU5hbWU6ICdMZWFndWUgb2YgTGVnZW5kcycsXHJcbiAgICAgICAgICAgIHllYXJSZWxlYXNlZDogJzIwMDgnLCBcclxuICAgICAgICB9XSxcclxuICAgICAgICBDb3VudDogMSxcclxuICAgICAgICBTY2FubmVkQ291bnQ6IDFcclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIk1vZGlmeUdhbWVcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgZ2FtZS5HYW1lKCdMZWFndWUgb2YgTGVnZW5kcycsICcyMDA4JywgJ01vYmEnLCAnUEMnLCAnUmlvdCBHYW1lcycpO1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZGF0YS5DcmVhdGVHYW1lKCk7XHJcbiAgICBcclxuICAgIGRhdGEgPSBpbmRleC5EZXNlcmlhbGl6ZUdhbWVEYXRhKHsgZ2FtZU5hbWU6ICdMZWFndWUgb2YgTGVnZW5kcycsIHllYXJSZWxlYXNlZDogJzIwMjEnLCBnZW5yZTogJ1N0cmF0ZWd5JyB9KVxyXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBnYW1lLk1vZGlmeUdhbWUoZGF0YSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh7XHJcbiAgICAgICAgQXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICBnYW1lTmFtZTogJ0xlYWd1ZSBvZiBMZWdlbmRzJyxcclxuICAgICAgICAgICAgeWVhclJlbGVhc2VkOiAnMjAyMScsIFxyXG4gICAgICAgICAgICBnZW5yZTogJ1N0cmF0ZWd5JywgXHJcbiAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkRlbGV0ZUdhbWVcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgZ2FtZS5HYW1lKFwiTGVhZ3VlIG9mIExlZ2VuZHNcIik7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBnYW1lLkRlbGV0ZUdhbWUoZGF0YSk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoe1xyXG4gICAgICAgIEF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgZ2FtZU5hbWU6IFwiTGVhZ3VlIG9mIExlZ2VuZHNcIixcclxuICAgICAgICAgICAgeWVhclJlbGVhc2VkOiAnMjAyMScsIFxyXG4gICAgICAgICAgICBnZW5yZTogJ1N0cmF0ZWd5JywgXHJcbiAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkdldEdhbWVIdHRwUmVzcG9uc2UgLSAyMDBcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgZ2FtZS5HYW1lKCdMZWFndWUgb2YgTGVnZW5kcycsICcyMDA4JywgJ01vYmEnLCAnUEMnLCAnUmlvdCBHYW1lcycpO1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZGF0YS5DcmVhdGVHYW1lKCk7XHJcblxyXG4gICAgZGF0YSA9IGluZGV4LkRlc2VyaWFsaXplR2FtZURhdGEoeyBnYW1lTmFtZTogJ0xlYWd1ZSBvZiBMZWdlbmRzJyB9KVxyXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBpbmRleC5HZXRHYW1lSHR0cFJlc3BvbnNlKGRhdGEpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoe1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICAgICAgIGdlbnJlOiAnTW9iYScsIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZTogJ1BDJywgXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJyxcclxuICAgICAgICAgICAgICAgIGdhbWVOYW1lOiAnTGVhZ3VlIG9mIExlZ2VuZHMnLFxyXG4gICAgICAgICAgICAgICAgeWVhclJlbGVhc2VkOiAnMjAwOCcsIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkdldEdhbWVIdHRwUmVzcG9uc2UgLSA0MDQgLSBHYW1lIGRvZXNuJ3QgZXhpc3RcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBpbmRleC5EZXNlcmlhbGl6ZUdhbWVEYXRhKHsgZ2FtZU5hbWU6ICdUaGUgV2l0bmVzcycgfSlcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGluZGV4LkdldEdhbWVIdHRwUmVzcG9uc2UoZGF0YSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDA0LFxyXG4gICAgICAgIGJvZHk6IFwiVW5hYmxlIHRvIGdldCBnYW1lLlwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJDcmVhdGVHYW1lSHR0cFJlc3BvbnNlIC0gMjAxIC0gU3VjY2Vzc1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgZGF0YSA9IG5ldyBnYW1lLkdhbWUoJ1BvcnRhbCAyJywgJzIwMTAnLCAnUHV6emxlJywgJ1BDJywgJ1ZhbHZlJyk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBpbmRleC5DcmVhdGVHYW1lSHR0cFJlc3BvbnNlKGRhdGEpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBzdGF0dXNDb2RlOiAyMDEsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBJdGVtOiB7XHJcbiAgICAgICAgICAgICAgICBnZW5yZTogJ1B1enpsZScsIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZTogJ1BDJywgXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXI6ICdWYWx2ZScsXHJcbiAgICAgICAgICAgICAgICBnYW1lTmFtZTogJ1BvcnRhbCAyJyxcclxuICAgICAgICAgICAgICAgIHllYXJSZWxlYXNlZDogJzIwMTAnLCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJDcmVhdGVHYW1lSHR0cFJlc3BvbnNlIC0gNDAwIC0gR2FtZSBhbHJlYWR5IGV4aXN0c1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgZGF0YSA9IG5ldyBnYW1lLkdhbWUoJ1BvcnRhbCAyJywgJzIwMTAnLCAnUHV6emxlJywgJ1BDJywgJ1ZhbHZlJyk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBpbmRleC5DcmVhdGVHYW1lSHR0cFJlc3BvbnNlKGRhdGEpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogXCJFcnJvciB3aXRoIHRoZSBwcm92aWRlZCBjb25kaXRpb24uXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkxpc3RHYW1lc0h0dHBSZXNwb25zZSAtIDIwMCAtIFN1Y2Nlc3NcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgaW5kZXguTGlzdEdhbWVzSHR0cFJlc3BvbnNlKCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoe1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIEl0ZW1zOiBbe1xyXG4gICAgICAgICAgICAgICAgZ2VucmU6ICdQdXp6bGUnLCBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICAgICAgZGV2ZWxvcGVyOiAnVmFsdmUnLFxyXG4gICAgICAgICAgICAgICAgZ2FtZU5hbWU6ICdQb3J0YWwgMicsXHJcbiAgICAgICAgICAgICAgICB5ZWFyUmVsZWFzZWQ6ICcyMDEwJywgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdlbnJlOiAnTW9iYScsIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZTogJ1BDJywgXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXI6ICdSaW90IEdhbWVzJyxcclxuICAgICAgICAgICAgICAgIGdhbWVOYW1lOiAnTGVhZ3VlIG9mIExlZ2VuZHMnLFxyXG4gICAgICAgICAgICAgICAgeWVhclJlbGVhc2VkOiAnMjAwOCcsIFxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgQ291bnQ6IDIsXHJcbiAgICAgICAgICAgIFNjYW5uZWRDb3VudDogMlxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJNb2RpZnlHYW1lSHR0cFJlc3BvbnNlIC0gMjAwIC0gU3VjY2Vzc1wiLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgZGF0YSA9IG5ldyBnYW1lLkdhbWUoJ1BvcnRhbCAyJywgJzIwMTUnLCAnRmlyc3QgUGVyc29uIFNob290ZXInLCAnUEMnLCAnVmFsdmUnKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGluZGV4Lk1vZGlmeUdhbWVIdHRwUmVzcG9uc2UoZGF0YSk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoe1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ2VucmU6ICdGaXJzdCBQZXJzb24gU2hvb3RlcicsIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZTogJ1BDJywgXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXI6ICdWYWx2ZScsXHJcbiAgICAgICAgICAgICAgICBnYW1lTmFtZTogJ1BvcnRhbCAyJyxcclxuICAgICAgICAgICAgICAgIHllYXJSZWxlYXNlZDogJzIwMTUnLCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIk1vZGlmeUdhbWVIdHRwUmVzcG9uc2UgLSA0MDAgLSBHYW1lIGRvZXNuJ3QgZXhpc3RcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgZ2FtZS5HYW1lKCdQb3J0YWwgMycsICcyMDE1JywgJ0ZpcnN0IFBlcnNvbiBTaG9vdGVyJywgJ1BDJywgJ1ZhbHZlJyk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBpbmRleC5Nb2RpZnlHYW1lSHR0cFJlc3BvbnNlKGRhdGEpO1xyXG4gICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogXCJFcnJvciB3aXRoIHRoZSBwcm92aWRlZCBjb25kaXRpb24uXCIsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn0pO1xyXG5cclxudGVzdChcIkRlbGV0ZUdhbWVIdHRwUmVzcG9uc2UgLSAyMDAgLSBTdWNjZXNzXCIsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBkYXRhID0gbmV3IGdhbWUuR2FtZSgnUG9ydGFsIDInKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGluZGV4LkRlbGV0ZUdhbWVIdHRwUmVzcG9uc2UoZGF0YSk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvRXF1YWwoe1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIEF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgIGdlbnJlOiAnRmlyc3QgUGVyc29uIFNob290ZXInLCBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGU6ICdQQycsIFxyXG4gICAgICAgICAgICAgICAgZGV2ZWxvcGVyOiAnVmFsdmUnLFxyXG4gICAgICAgICAgICAgICAgZ2FtZU5hbWU6ICdQb3J0YWwgMicsXHJcbiAgICAgICAgICAgICAgICB5ZWFyUmVsZWFzZWQ6IFwiMjAxNVwiLCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJEZWxldGVHYW1lSHR0cFJlc3BvbnNlIC0gNDAwIC0gR2FtZSBub3QgZm91bmRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgbGV0IGRhdGEgPSBuZXcgZ2FtZS5HYW1lKCdQb3J0YWwgMicpO1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgaW5kZXguRGVsZXRlR2FtZUh0dHBSZXNwb25zZShkYXRhKTtcclxuICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbCh7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDA0LFxyXG4gICAgICAgIGJvZHk6IFwiVW5hYmxlIHRvIGRlbGV0ZSBnYW1lLlwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59KTtcclxuXHJcbnRlc3QoXCJQYXJzZUR5bmFtb0Vycm9yIC0gQ29uZGl0aW9uYWxDaGVja0ZhaWxlZEV4Y2VwdGlvblwiLCAoKSA9PiB7XHJcbiAgICBsZXQgZXJyb3IgPSBcIkNvbmRpdGlvbmFsQ2hlY2tGYWlsZWRFeGNlcHRpb25cIlxyXG4gICAgZXhwZWN0KGluZGV4LlBhcnNlRHluYW1vRXJyb3IoZXJyb3IpKS50b0VxdWFsKFxyXG4gICAgICAgIGluZGV4Lkh0dHBSZXNwb25zZSh7c3RhdHVzQ29kZTogNDAwLCBib2R5OiBcIkVycm9yIHdpdGggdGhlIHByb3ZpZGVkIGNvbmRpdGlvbi5cIn0pXHJcbiAgICApO1xyXG59KTtcclxuXHJcbnRlc3QoXCJQYXJzZUR5bmFtb0Vycm9yIC0gVW5oYW5kbGVkIGR5bmFtb0RCIGVycm9yXCIsICgpID0+IHtcclxuICAgIGxldCBlcnJvciA9IFwiQWNjZXNzRGVuaWVkRXhjZXB0aW9uXCJcclxuICAgIGV4cGVjdChpbmRleC5QYXJzZUR5bmFtb0Vycm9yKGVycm9yKSkudG9FcXVhbChcclxuICAgICAgICBpbmRleC5IdHRwUmVzcG9uc2Uoe3N0YXR1c0NvZGU6IDQwMCwgYm9keTogXCJJbnZhbGlkIG9wZXJhdGlvbi5cIn0pXHJcbiAgICApO1xyXG59KTsiXX0=
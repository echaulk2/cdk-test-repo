"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const modules = require("../functions/modules");
const index = require("../functions/index");
//SerializeGameData
test("SerializeGameData | Success", () => {
    let gameData = { gameName: "League of Legends", yearReleased: 2008, genre: "MOBA", console: "PC", developer: "Riot Games" };
    expect(index.DeserializeGameData(gameData))
        .toEqual(new modules.Game("League of Legends", 2008, "MOBA", "PC", "Riot Games"));
});
test("SerializeGameData | Fail | no gameName", () => {
    let gameData = { yearReleased: 2008, genre: "MOBA", console: "PC", developer: "Riot Games" };
    expect(index.DeserializeGameData(gameData))
        .not.toEqual(new modules.Game("League of Legends", 2008, "MOBA", "PC", "Riot Games"));
});
test("SerializeGameData | Success | Empty JSON input", () => {
    let gameData = {};
    expect(index.DeserializeGameData(gameData))
        .toEqual({});
});
//HttpResponse
test("HttpResponse | Success", () => {
    let game = new modules.Game("League of Legends", 2008, "MOBA", "PC", "Riot Games");
    let response = { statusCode: 200, body: JSON.stringify(game) };
    expect(index.HttpResponse(response))
        .toEqual({
        statusCode: 200,
        body: JSON.stringify(game),
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
test("HttpResponse | Fail", () => {
    let game = new modules.Game("League of Legends", 2008, "MOBA", "PC", "Riot Games");
    let response = { statusCode: 200, body: JSON.stringify(game) };
    expect(index.HttpResponse(response))
        .not.toEqual({
        statusCode: 404,
        body: 'Unable to find game',
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    });
});
const { DocumentClient } = require('aws-sdk/clients/dynamodb');
const isTest = process.env.JEST_WORKER_ID;
const config = {
    convertEmptyValues: true,
    ...(isTest && {
        endpoint: 'localhost:8000',
        sslEnabled: false,
        region: 'local-env',
    }),
};
const ddb = new DocumentClient(config);
//GetGame
it('should insert item into table', async () => {
    await ddb
        .put({ TableName: 'files', Item: { id: '1', hello: 'world' } })
        .promise();
    const { Item } = await ddb.get({ TableName: 'files', Key: { id: '1' } }).promise();
    expect(Item).toEqual({
        id: '1',
        hello: 'world',
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmdW5jdGlvbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0FBQzNDLG1CQUFtQjtBQUNuQixJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLElBQUksUUFBUSxHQUFHLEVBQUUsUUFBUSxFQUFDLG1CQUFtQixFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsQ0FBQTtJQUMxSCxNQUFNLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzFDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUN0RixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7SUFDaEQsSUFBSSxRQUFRLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUE7SUFDNUYsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMxQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQzFGLENBQUMsQ0FBQyxD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TztLQUNmLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi9mdW5jdGlvbnMvbW9kdWxlc1wiO1xyXG5cclxuY29uc3QgbW9kdWxlcyA9IHJlcXVpcmUoXCIuLi9mdW5jdGlvbnMvbW9kdWxlc1wiKTtcclxuY29uc3QgaW5kZXggPSByZXF1aXJlKFwiLi4vZnVuY3Rpb25zL2luZGV4XCIpXHJcbi8vU2VyaWFsaXplR2FtZURhdGFcclxudGVzdChcIlNlcmlhbGl6ZUdhbWVEYXRhIHwgU3VjY2Vzc1wiLCAoKSA9PiB7XHJcbiAgICBsZXQgZ2FtZURhdGEgPSB7IGdhbWVOYW1lOlwiTGVhZ3VlIG9mIExlZ2VuZHNcIiwgeWVhclJlbGVhc2VkOiAyMDA4LCBnZW5yZTogXCJNT0JBXCIsIGNvbnNvbGU6IFwiUENcIiwgZGV2ZWxvcGVyOiBcIlJpb3QgR2FtZXNcIiB9XHJcbiAgICBleHBlY3QoaW5kZXguRGVzZXJpYWxpemVHYW1lRGF0YShnYW1lRGF0YSkpXHJcbiAgICAudG9FcXVhbChuZXcgbW9kdWxlcy5HYW1lKFwiTGVhZ3VlIG9mIExlZ2VuZHNcIiwgMjAwOCwgXCJNT0JBXCIsIFwiUENcIiwgXCJSaW90IEdhbWVzXCIpKTtcclxufSk7XHJcblxyXG50ZXN0KFwiU2VyaWFsaXplR2FtZURhdGEgfCBGYWlsIHwgbm8gZ2FtZU5hbWVcIiwgKCkgPT4ge1xyXG4gICAgbGV0IGdhbWVEYXRhID0geyB5ZWFyUmVsZWFzZWQ6IDIwMDgsIGdlbnJlOiBcIk1PQkFcIiwgY29uc29sZTogXCJQQ1wiLCBkZXZlbG9wZXI6IFwiUmlvdCBHYW1lc1wiIH1cclxuICAgIGV4cGVjdChpbmRleC5EZXNlcmlhbGl6ZUdhbWVEYXRhKGdhbWVEYXRhKSlcclxuICAgIC5ub3QudG9FcXVhbChuZXcgbW9kdWxlcy5HYW1lKFwiTGVhZ3VlIG9mIExlZ2VuZHNcIiwgMjAwOCwgXCJNT0JBXCIsIFwiUENcIiwgXCJSaW90IEdhbWVzXCIpKTtcclxufSk7XHJcblxyXG50ZXN0KFwiU2VyaWFsaXplR2FtZURhdGEgfCBTdWNjZXNzIHwgRW1wdHkgSlNPTiBpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICBsZXQgZ2FtZURhdGEgPSB7fVxyXG4gICAgZXhwZWN0KGluZGV4LkRlc2VyaWFsaXplR2FtZURhdGEoZ2FtZURhdGEpKVxyXG4gICAgLnRvRXF1YWwoe30pO1xyXG59KTtcclxuXHJcbi8vSHR0cFJlc3BvbnNlXHJcbnRlc3QoXCJIdHRwUmVzcG9uc2UgfCBTdWNjZXNzXCIsICgpID0+IHtcclxuICAgIGxldCBnYW1lID0gbmV3IG1vZHVsZXMuR2FtZShcIkxlYWd1ZSBvZiBMZWdlbmRzXCIsIDIwMDgsIFwiTU9CQVwiLCBcIlBDXCIsIFwiUmlvdCBHYW1lc1wiICk7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSB7c3RhdHVzQ29kZTogMjAwLCBib2R5OiBKU09OLnN0cmluZ2lmeShnYW1lKX1cclxuICAgIGV4cGVjdChpbmRleC5IdHRwUmVzcG9uc2UocmVzcG9uc2UpKVxyXG4gICAgLnRvRXF1YWwoe1xyXG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGdhbWUpLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG50ZXN0KFwiSHR0cFJlc3BvbnNlIHwgRmFpbFwiLCAoKSA9PiB7XHJcbiAgICBsZXQgZ2FtZSA9IG5ldyBtb2R1bGVzLkdhbWUoXCJMZWFndWUgb2YgTGVnZW5kc1wiLCAyMDA4LCBcIk1PQkFcIiwgXCJQQ1wiLCBcIlJpb3QgR2FtZXNcIiApO1xyXG4gICAgbGV0IHJlc3BvbnNlID0ge3N0YXR1c0NvZGU6IDIwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoZ2FtZSl9XHJcbiAgICBleHBlY3QoaW5kZXguSHR0cFJlc3BvbnNlKHJlc3BvbnNlKSlcclxuICAgIC5ub3QudG9FcXVhbCh7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDQwNCxcclxuICAgICAgYm9keTogJ1VuYWJsZSB0byBmaW5kIGdhbWUnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufSk7XHJcbmNvbnN0IHtEb2N1bWVudENsaWVudH0gPSByZXF1aXJlKCdhd3Mtc2RrL2NsaWVudHMvZHluYW1vZGInKTtcclxuXHJcbmNvbnN0IGlzVGVzdCA9IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEO1xyXG5jb25zdCBjb25maWcgPSB7XHJcbiAgY29udmVydEVtcHR5VmFsdWVzOiB0cnVlLFxyXG4gIC4uLihpc1Rlc3QgJiYge1xyXG4gICAgZW5kcG9pbnQ6ICdsb2NhbGhvc3Q6ODAwMCcsXHJcbiAgICBzc2xFbmFibGVkOiBmYWxzZSxcclxuICAgIHJlZ2lvbjogJ2xvY2FsLWVudicsXHJcbiAgfSksXHJcbn07XHJcblxyXG5jb25zdCBkZGIgPSBuZXcgRG9jdW1lbnRDbGllbnQoY29uZmlnKTtcclxuLy9HZXRHYW1lXHJcbml0KCdzaG91bGQgaW5zZXJ0IGl0ZW0gaW50byB0YWJsZScsIGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBkZGJcclxuICAgIC5wdXQoe1RhYmxlTmFtZTogJ2ZpbGVzJywgSXRlbToge2lkOiAnMScsIGhlbGxvOiAnd29ybGQnfX0pXHJcbiAgICAucHJvbWlzZSgpO1xyXG5cclxuICBjb25zdCB7SXRlbX0gPSBhd2FpdCBkZGIuZ2V0KHtUYWJsZU5hbWU6ICdmaWxlcycsIEtleToge2lkOiAnMSd9fSkucHJvbWlzZSgpO1xyXG5cclxuICBleHBlY3QoSXRlbSkudG9FcXVhbCh7XHJcbiAgICBpZDogJzEnLFxyXG4gICAgaGVsbG86ICd3b3JsZCcsXHJcbiAgfSk7XHJcbn0pOyJdfQ==
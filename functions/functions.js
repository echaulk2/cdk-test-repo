"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializeGameData = exports.HttpResponse = exports.deleteGame = exports.modifyGame = exports.createGame = exports.listGames = exports.getGame = void 0;
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
const table = process.env.DYNAMO_DB_TABLE;
const modules_1 = require("./modules");
const allowedRequestParameters = JSON.parse(process.env.ALLOWED_REQUEST_PARAMETERS);
async function getGame(gameName) {
    let params = {
        TableName: table,
        Key: {
            gameName: gameName
        }
    };
    try {
        let response = await docClient.get(params).promise();
        if (response.Item) {
            let game = SerializeGameData(response.Item);
            return HttpResponse({ statusCode: 200, body: JSON.stringify(game) });
        }
        else {
            return HttpResponse({ statusCode: 404, body: "Unable to find game." });
        }
    }
    catch (err) {
        return HttpResponse({ statusCode: 400, body: "Unable to find game." });
    }
}
exports.getGame = getGame;
async function listGames() {
    let params = {
        TableName: table,
        Select: "ALL_ATTRIBUTES"
    };
    try {
        let response = await docClient.scan(params).promise();
        let gameList = [];
        if (response.Items) {
            response.Items.forEach((game) => {
                gameList.push(SerializeGameData(game));
            });
            return HttpResponse({ statusCode: 200, body: JSON.stringify(gameList) });
        }
        else {
            return HttpResponse({ statusCode: 404, body: 'Game list could not be found.' });
        }
    }
    catch (err) {
        return HttpResponse({ statusCode: 400, body: 'Game list could not be found.' });
    }
}
exports.listGames = listGames;
async function createGame(game) {
    let params = {
        TableName: table,
        Item: {
            gameName: game.gameName,
            genre: game.genre,
            yearReleased: game.yearReleased,
            developer: game.developer,
            console: game.console
        },
        ConditionExpression: 'attribute_not_exists(gameName)'
    };
    try {
        let response = await docClient.put(params).promise();
        if (Object.keys(response).length == 0) {
            return HttpResponse({ statusCode: 201, body: JSON.stringify(game) });
        }
        else {
            return HttpResponse({ statusCode: 403, body: 'Unable to create game.' });
        }
    }
    catch (err) {
        return HttpResponse({ statusCode: 400, body: 'Unable to create game.' });
    }
}
exports.createGame = createGame;
async function modifyGame(game) {
    let updateExpression = [];
    let expressionAttributeNames = {};
    let expressionAttributeValues = {};
    //Generate dynammic update expression based on allowed parameters
    for (let [key, value] of Object.entries(game)) {
        if (allowedRequestParameters.includes(key) && value != undefined) {
            updateExpression.push(`#${key} = :${key}`);
            expressionAttributeNames['#' + key] = key;
            expressionAttributeValues[':' + key] = `${value}`;
        }
    }
    let params = {
        TableName: table,
        Key: {
            gameName: game.gameName
        },
        UpdateExpression: `SET ${updateExpression.join(",")}`,
        ExpressionAttributeNames: expressionAttributeNames,
        ExpressionAttributeValues: expressionAttributeValues,
        ConditionExpression: 'attribute_exists(gameName)',
        ReturnValues: 'ALL_NEW'
    };
    try {
        let response = await docClient.update(params).promise();
        if (response.Attributes) {
            let modifiedGame = SerializeGameData(response.Attributes);
            return HttpResponse({ statusCode: 200, body: JSON.stringify(modifiedGame) });
        }
        else {
            return HttpResponse({ statusCode: 403, body: 'Unable to modify game.' });
        }
    }
    catch (err) {
        return HttpResponse({ statusCode: 400, body: 'Unable to modify game.' });
    }
}
exports.modifyGame = modifyGame;
async function deleteGame(gameName) {
    let params = {
        TableName: table,
        Key: {
            gameName: gameName
        },
        ReturnValues: 'ALL_OLD'
    };
    try {
        let response = await docClient.delete(params).promise();
        if (response.Attributes) {
            let deletedGame = SerializeGameData(response.Attributes);
            return HttpResponse({ statusCode: 200, body: JSON.stringify(deletedGame) });
        }
        else {
            return HttpResponse({ statusCode: 404, body: 'Unable to delete game.' });
        }
    }
    catch (err) {
        return HttpResponse({ statusCode: 400, body: 'Unable to delete game.' });
    }
}
exports.deleteGame = deleteGame;
function HttpResponse(data) {
    return {
        statusCode: data.statusCode,
        body: data.body,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
}
exports.HttpResponse = HttpResponse;
function SerializeGameData(data) {
    return new modules_1.Game(data.gameName, data.yearReleased, data.genre, data.console, data.developer);
}
exports.SerializeGameData = SerializeGameData;
//# sourceMappingURL=data:application/json;base64,
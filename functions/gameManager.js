"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeDynamoResponse = exports.deleteGame = exports.modifyGame = exports.listGames = exports.getGame = exports.createGame = void 0;
const AWS = require('aws-sdk');
const isTest = process.env.JEST_WORKER_ID;
const config = {
    convertEmptyValues: true,
    ...(isTest && {
        endpoint: 'localhost:8000',
        sslEnabled: false,
        region: 'local-env',
    }),
};
const docClient = new AWS.DynamoDB.DocumentClient(config);
const table = (isTest) ? process.env.DYNAMO_DB_TEST_TABLE : process.env.DYNAMO_DB_GAME_TABLE;
const game_1 = require("./game");
const gameErrorHandler_1 = require("./gameErrorHandler");
async function createGame(game) {
    let params = {
        TableName: table,
        Item: {
            partitionKey: game.partitionKey,
            sortKey: game.sortKey,
            gameName: game.gameName,
            genre: game.genre,
            yearReleased: game.yearReleased,
            developer: game.developer,
            console: game.console
        },
        ConditionExpression: 'attribute_not_exists(partitionKey) AND attribute_not_exists(sortKey)'
    };
    try {
        let response = await docClient.put(params).promise();
        let createdGame = await getGame(game);
        return game;
    }
    catch (err) {
        throw new gameErrorHandler_1.GameError(err.message, err.statusCode);
    }
}
exports.createGame = createGame;
async function getGame(game) {
    let params = {
        TableName: table,
        Key: {
            partitionKey: game.partitionKey,
            sortKey: game.sortKey
        },
        KeyConditionExpression: `sortKey = ${game.sortKey} AND partitionKey = ${game.partitionKey}`
    };
    try {
        let response = await docClient.get(params).promise();
        let game = serializeDynamoResponse(response.Item);
        return game;
    }
    catch (err) {
        //Dynamo returns an empty object if the get can't find a record.
        //Not sure how to handle this since the documentClient doesn't throw an error
        if (err.message == "Cannot read property 'partitionKey' of undefined") {
            throw new gameErrorHandler_1.GameError("Unable to find game.", 404);
        }
        throw err;
    }
}
exports.getGame = getGame;
async function listGames(userID) {
    let params = {
        TableName: table,
        KeyConditionExpression: "#partitionKey = :partitionKey AND begins_with(sortKey, :sortKey)",
        FilterExpression: "attribute_exists(gameName)",
        ExpressionAttributeNames: {
            "#partitionKey": "partitionKey",
        },
        ExpressionAttributeValues: {
            ":partitionKey": `[User]#[${userID}]`,
            ":sortKey": "[GameItem]"
        }
    };
    try {
        let response = await docClient.query(params).promise();
        let gameList = [];
        response.Items.forEach((game) => {
            let returnedGame = serializeDynamoResponse(game);
            gameList.push(returnedGame);
        });
        return gameList;
    }
    catch (err) {
        throw err;
    }
}
exports.listGames = listGames;
async function modifyGame(game) {
    let updateExpression = [];
    let expressionAttributeNames = {};
    let expressionAttributeValues = {};
    //Generate dynammic update expression based on allowed parameters
    for (let [key, value] of Object.entries(game)) {
        if (key != 'partitionKey' && key != 'gameName' && key != 'sortKey' && value != undefined) {
            updateExpression.push(`#${key} = :${key}`);
            expressionAttributeNames[`#${key}`] = key;
            expressionAttributeValues[`:${key}`] = value;
        }
    }
    let params = {
        TableName: table,
        Key: {
            partitionKey: game.partitionKey,
            sortKey: game.sortKey
        },
        KeyConditionExpression: `sortKey = ${game.sortKey} AND partitionKey = ${game.partitionKey}`,
        UpdateExpression: `SET ${updateExpression.join(",")}`,
        ExpressionAttributeNames: expressionAttributeNames,
        ExpressionAttributeValues: expressionAttributeValues,
        ConditionExpression: 'attribute_exists(partitionKey) and attribute_exists(sortKey)',
        ReturnValues: 'ALL_NEW'
    };
    try {
        let response = await docClient.update(params).promise();
        let modifiedGame = await getGame(game);
        return modifiedGame;
    }
    catch (err) {
        if (err.message == "The conditional request failed") {
            throw new gameErrorHandler_1.GameError("Unable to modify game.", 400);
        }
        throw err;
    }
}
exports.modifyGame = modifyGame;
async function deleteGame(game) {
    let params = {
        TableName: table,
        Key: {
            partitionKey: game.partitionKey,
            sortKey: game.sortKey
        },
        KeyConditionExpression: `sortKey = ${game.sortKey} AND partitionKey = ${game.partitionKey}`,
        ConditionExpression: 'attribute_exists(sortKey) and attribute_exists(partitionKey)',
        ReturnValues: 'ALL_OLD'
    };
    try {
        let response = await docClient.delete(params).promise();
        let game = serializeDynamoResponse(response.Attributes);
        return game;
    }
    catch (err) {
        if (err.message == "The conditional request failed") {
            throw new gameErrorHandler_1.GameError("Unable to delete game.", 400);
        }
        throw err;
    }
}
exports.deleteGame = deleteGame;
function serializeDynamoResponse(data) {
    let game = new game_1.Game(data.partitionKey, data.sortKey, data.gameName, data === null || data === void 0 ? void 0 : data.yearReleased, data === null || data === void 0 ? void 0 : data.genre, data === null || data === void 0 ? void 0 : data.console, data === null || data === void 0 ? void 0 : data.developer);
    return game;
}
exports.serializeDynamoResponse = serializeDynamoResponse;
//# sourceMappingURL=data:application/json;base64,
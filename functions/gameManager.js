"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeDynamoResponse = exports.deleteGame = exports.modifyGame = exports.listGames = exports.getGame = void 0;
const AWS = require('aws-sdk');
const isTest = process.env.JEST_WORKER_ID;
const config = {
    convertEmptyValues: true,
    ...(isTest && {
        endpoint: 'localhost:8000',
        sslEnabled: false,
        region: 'local-env',
    }),
};
const docClient = new AWS.DynamoDB.DocumentClient(config);
const table = (isTest) ? process.env.DYNAMO_DB_TEST_TABLE : process.env.DYNAMO_DB_GAME_TABLE;
const game_1 = require("./game");
const gameErrorHandler_1 = require("./gameErrorHandler");
async function getGame(game) {
    let params = {
        TableName: table,
        Key: {
            userID: game.userID,
            gameName: game.gameName
        },
        KeyConditionExpression: `gameName = ${game.gameName} AND userID = ${game.userID}`
    };
    try {
        let response = await docClient.get(params).promise();
        let game = serializeDynamoResponse(response.Item);
        return game;
    }
    catch (err) {
        //Dynamo returns an empty object if the get can't find a record.
        //Not sure how to handle this since the documentClient doesn't throw an error
        if (err.message == "Cannot read property 'userID' of undefined") {
            throw new gameErrorHandler_1.GameError("Unable to find game.", 404);
        }
        throw err;
    }
}
exports.getGame = getGame;
async function listGames(userID) {
    let params = {
        TableName: table,
        KeyConditionExpression: "#userID = :userID",
        ExpressionAttributeNames: {
            "#userID": "userID"
        },
        ExpressionAttributeValues: {
            ":userID": userID
        }
    };
    try {
        let response = await docClient.query(params).promise();
        let gameList = [];
        response.Items.forEach((game) => {
            let returnedGame = serializeDynamoResponse(game);
            gameList.push(returnedGame);
        });
        return gameList;
    }
    catch (err) {
        throw err;
    }
}
exports.listGames = listGames;
async function modifyGame(game) {
    let updateExpression = [];
    let expressionAttributeNames = {};
    let expressionAttributeValues = {};
    //Generate dynammic update expression based on allowed parameters
    for (let [key, value] of Object.entries(game)) {
        if (key != 'userID' && key != 'gameName' && value != undefined) {
            updateExpression.push(`#${key} = :${key}`);
            expressionAttributeNames[`#${key}`] = key;
            expressionAttributeValues[`:${key}`] = value;
        }
    }
    let params = {
        TableName: table,
        Key: {
            userID: game.userID,
            gameName: game.gameName
        },
        KeyConditionExpression: `gameName = ${game.gameName} AND userID = ${game.userID}`,
        UpdateExpression: `SET ${updateExpression.join(",")}`,
        ExpressionAttributeNames: expressionAttributeNames,
        ExpressionAttributeValues: expressionAttributeValues,
        ConditionExpression: 'attribute_exists(gameName) and attribute_exists(userID)',
        ReturnValues: 'ALL_NEW'
    };
    try {
        let response = await docClient.update(params).promise();
        let modifiedGame = await getGame(game);
        return modifiedGame;
    }
    catch (err) {
        if (err.message == "The conditional request failed") {
            throw new gameErrorHandler_1.GameError("Unable to modify game.", 404);
        }
        throw err;
    }
}
exports.modifyGame = modifyGame;
async function deleteGame(game) {
    let params = {
        TableName: table,
        Key: {
            userID: game.userID,
            gameName: game.gameName
        },
        KeyConditionExpression: `gameName = ${game.gameName} AND userID = ${game.userID}`,
        ConditionExpression: 'attribute_exists(gameName) and attribute_exists(userID)',
        ReturnValues: 'ALL_OLD'
    };
    try {
        let response = await docClient.delete(params).promise();
        let game = serializeDynamoResponse(response.Attributes);
        return game;
    }
    catch (err) {
        if (err.message == "The conditional request failed") {
            throw new gameErrorHandler_1.GameError("Unable to find game.", 404);
        }
        throw err;
    }
}
exports.deleteGame = deleteGame;
function serializeDynamoResponse(data) {
    let game = new game_1.Game(data.userID, data.gameName, data === null || data === void 0 ? void 0 : data.yearReleased, data === null || data === void 0 ? void 0 : data.genre, data === null || data === void 0 ? void 0 : data.console, data === null || data === void 0 ? void 0 : data.developer);
    return game;
}
exports.serializeDynamoResponse = serializeDynamoResponse;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
const AWS = require('aws-sdk');
const isTest = process.env.JEST_WORKER_ID;
const config = {
    convertEmptyValues: true,
    ...(isTest && {
        endpoint: 'localhost:8000',
        sslEnabled: false,
        region: 'local-env',
    }),
};
const docClient = new AWS.DynamoDB.DocumentClient(config);
const table = (isTest) ? process.env.DYNAMO_DB_TEST_TABLE : process.env.DYNAMO_DB_GAME_TABLE;
const gameErrorHandler_1 = require("./gameErrorHandler");
const gameManager_1 = require("./gameManager");
class Game {
    //Constructor 
    constructor(userID, gameName, yearReleased, genre, console, developer) {
        this.userID = userID,
            this.gameName = gameName,
            this.sortKey = `[${this.userID}]#[game]#[${this.gameName}]`,
            this.yearReleased = yearReleased,
            this.genre = genre,
            this.console = console,
            this.developer = developer;
    }
    async createGame() {
        let params = {
            TableName: table,
            Item: {
                userID: this.userID,
                sortKey: this.sortKey,
                gameName: this.gameName,
                genre: this.genre,
                yearReleased: this.yearReleased,
                developer: this.developer,
                console: this.console
            },
            ConditionExpression: 'attribute_not_exists(gameName) AND attribute_not_exists(userID) AND attribute_not_exists(sortKey)'
        };
        try {
            let response = await docClient.put(params).promise();
            let game = await (0, gameManager_1.getGame)(this);
            return game;
        }
        catch (err) {
            throw new gameErrorHandler_1.GameError(err.message, err.statusCode);
        }
    }
}
exports.Game = Game;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO0FBQzFDLE1BQU0sTUFBTSxHQUFHO0lBQ2Isa0JBQWtCLEVBQUUsSUFBSTtJQUN4QixHQUFHLENBQUMsTUFBTSxJQUFJO1FBQ1osUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixVQUFVLEVBQUUsS0FBSztRQUNqQixNQUFNLEVBQUUsV0FBVztLQUNwQixDQUFDO0NBQ0gsQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztBQUM3Rix5REFBK0M7QUFDL0MsK0NBQXdDO0FBRXhDLE1BQWEsSUFBSTtJQVViLGNBQWM7SUFDZCxZQUFZLE1BQWEsRUFBRSxRQUFlLEVBQUUsWUFBb0IsRUFBRSxLQUFhLEVBQUUsT0FBZSxFQUFFLFNBQWlCO1FBQ2hILElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTTtZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVE7WUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLGFBQWEsSUFBSSxDQUFDLFFBQVEsR0FBRztZQUMzRCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVk7WUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTztZQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDZCxJQUFJLE1BQU0sR0FBRztZQUNYLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLElBQUksRUFBRTtnQkFDSixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDckIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDL0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87YUFDdEI7WUFDRCxtQkFBbUIsRUFBRSxtR0FBbUc7U0FDekgsQ0FBQTtRQUVELElBQUk7WUFDRixJQUFJLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckQsSUFBSSxJQUFJLEdBQUcsTUFBTSxJQUFBLHFCQUFPLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU0sR0FBUSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSw0QkFBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO0lBQ0gsQ0FBQztDQUNIO0FBNUNGLG9CQTRDRSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuY29uc3QgaXNUZXN0ID0gcHJvY2Vzcy5lbnYuSkVTVF9XT1JLRVJfSUQ7XHJcbmNvbnN0IGNvbmZpZyA9IHtcclxuICBjb252ZXJ0RW1wdHlWYWx1ZXM6IHRydWUsXHJcbiAgLi4uKGlzVGVzdCAmJiB7XHJcbiAgICBlbmRwb2ludDogJ2xvY2FsaG9zdDo4MDAwJyxcclxuICAgIHNzbEVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgcmVnaW9uOiAnbG9jYWwtZW52JyxcclxuICB9KSxcclxufTtcclxuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudChjb25maWcpO1xyXG5jb25zdCB0YWJsZSA9IChpc1Rlc3QpID8gcHJvY2Vzcy5lbnYuRFlOQU1PX0RCX1RFU1RfVEFCTEUgOiBwcm9jZXNzLmVudi5EWU5BTU9fREJfR0FNRV9UQUJMRTtcclxuaW1wb3J0IHsgR2FtZUVycm9yIH0gZnJvbSBcIi4vZ2FtZUVycm9ySGFuZGxlclwiO1xyXG5pbXBvcnQgeyBnZXRHYW1lIH0gZnJvbSBcIi4vZ2FtZU1hbmFnZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lIHsgXHJcbiAgICAvL0ZpZWxkcyBcclxuICAgIHVzZXJJRDogc3RyaW5nO1xyXG4gICAgc29ydEtleTogc3RyaW5nO1xyXG4gICAgZ2FtZU5hbWU6IHN0cmluZzsgICAgIFxyXG4gICAgeWVhclJlbGVhc2VkPzogbnVtYmVyO1xyXG4gICAgZ2VucmU/OiBzdHJpbmc7XHJcbiAgICBjb25zb2xlPzogc3RyaW5nO1xyXG4gICAgZGV2ZWxvcGVyPzogc3RyaW5nO1xyXG4gIFxyXG4gICAgLy9Db25zdHJ1Y3RvciBcclxuICAgIGNvbnN0cnVjdG9yKHVzZXJJRDpzdHJpbmcsIGdhbWVOYW1lOnN0cmluZywgeWVhclJlbGVhc2VkPzpudW1iZXIsIGdlbnJlPzpzdHJpbmcsIGNvbnNvbGU/OnN0cmluZywgZGV2ZWxvcGVyPzpzdHJpbmcpIHsgXHJcbiAgICAgICB0aGlzLnVzZXJJRCA9IHVzZXJJRCxcclxuICAgICAgIHRoaXMuZ2FtZU5hbWUgPSBnYW1lTmFtZSxcclxuICAgICAgIHRoaXMuc29ydEtleSA9IGBbJHt0aGlzLnVzZXJJRH1dI1tnYW1lXSNbJHt0aGlzLmdhbWVOYW1lfV1gLFxyXG4gICAgICAgdGhpcy55ZWFyUmVsZWFzZWQgPSB5ZWFyUmVsZWFzZWQsXHJcbiAgICAgICB0aGlzLmdlbnJlID0gZ2VucmUsXHJcbiAgICAgICB0aGlzLmNvbnNvbGUgPSBjb25zb2xlLFxyXG4gICAgICAgdGhpcy5kZXZlbG9wZXIgPSBkZXZlbG9wZXJcclxuICAgIH1cclxuICAgIFxyXG4gICAgYXN5bmMgY3JlYXRlR2FtZSgpOiBQcm9taXNlPEdhbWU+IHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlLFxyXG4gICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgIHVzZXJJRDogdGhpcy51c2VySUQsXHJcbiAgICAgICAgICBzb3J0S2V5OiB0aGlzLnNvcnRLZXksXHJcbiAgICAgICAgICBnYW1lTmFtZTogdGhpcy5nYW1lTmFtZSwgICAgICAgICAgXHJcbiAgICAgICAgICBnZW5yZTogdGhpcy5nZW5yZSxcclxuICAgICAgICAgIHllYXJSZWxlYXNlZDogdGhpcy55ZWFyUmVsZWFzZWQsXHJcbiAgICAgICAgICBkZXZlbG9wZXI6IHRoaXMuZGV2ZWxvcGVyLFxyXG4gICAgICAgICAgY29uc29sZTogdGhpcy5jb25zb2xlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBDb25kaXRpb25FeHByZXNzaW9uOiAnYXR0cmlidXRlX25vdF9leGlzdHMoZ2FtZU5hbWUpIEFORCBhdHRyaWJ1dGVfbm90X2V4aXN0cyh1c2VySUQpIEFORCBhdHRyaWJ1dGVfbm90X2V4aXN0cyhzb3J0S2V5KSdcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGRvY0NsaWVudC5wdXQocGFyYW1zKS5wcm9taXNlKCk7XHJcbiAgICAgICAgbGV0IGdhbWUgPSBhd2FpdCBnZXRHYW1lKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBnYW1lO1xyXG4gICAgICB9IGNhdGNoKGVycjogYW55KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEdhbWVFcnJvcihlcnIubWVzc2FnZSwgZXJyLnN0YXR1c0NvZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiB9Il19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
const AWS = require('aws-sdk');
const isTest = process.env.JEST_WORKER_ID;
const config = {
    convertEmptyValues: true,
    ...(isTest && {
        endpoint: 'localhost:8000',
        sslEnabled: false,
        region: 'local-env',
    }),
};
const docClient = new AWS.DynamoDB.DocumentClient(config);
const table = (isTest) ? process.env.DYNAMO_DB_TEST_TABLE : process.env.DYNAMO_DB_GAME_TABLE;
const gameErrorHandler_1 = require("./gameErrorHandler");
const gameManager_1 = require("./gameManager");
class Game {
    //Constructor 
    constructor(userID, gameName, yearReleased, genre, console, developer) {
        this.userID = userID,
            this.gameName = gameName,
            this.yearReleased = yearReleased,
            this.genre = genre,
            this.console = console,
            this.developer = developer;
    }
    async createGame() {
        let params = {
            TableName: table,
            Item: {
                userID: this.userID,
                gameName: this.gameName,
                genre: this.genre,
                yearReleased: this.yearReleased,
                developer: this.developer,
                console: this.console
            },
            ConditionExpression: 'attribute_not_exists(gameName) AND attribute_not_exists(userID)'
        };
        try {
            let response = await docClient.put(params).promise();
            let game = await (0, gameManager_1.getGame)(this);
            return game;
        }
        catch (err) {
            throw new gameErrorHandler_1.GameError(err.message, err.statusCode);
        }
    }
}
exports.Game = Game;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO0FBQzFDLE1BQU0sTUFBTSxHQUFHO0lBQ2Isa0JBQWtCLEVBQUUsSUFBSTtJQUN4QixHQUFHLENBQUMsTUFBTSxJQUFJO1FBQ1osUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixVQUFVLEVBQUUsS0FBSztRQUNqQixNQUFNLEVBQUUsV0FBVztLQUNwQixDQUFDO0NBQ0gsQ0FBQztBQUNGLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztBQUM3Rix5REFBK0M7QUFDL0MsK0NBQXdDO0FBRXhDLE1BQWEsSUFBSTtJQVNiLGNBQWM7SUFDZCxZQUFZLE1BQWEsRUFBRSxRQUFlLEVBQUUsWUFBb0IsRUFBRSxLQUFhLEVBQUUsT0FBZSxFQUFFLFNBQWlCO1FBQ2hILElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTTtZQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVE7WUFDeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSztZQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU87WUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7SUFDN0IsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ2QsSUFBSSxNQUFNLEdBQUc7WUFDWCxTQUFTLEVBQUUsS0FBSztZQUNoQixJQUFJLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2dCQUMvQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QjtZQUNELG1CQUFtQixFQUFFLGlFQUFpRTtTQUN2RixDQUFBO1FBRUQsSUFBSTtZQUNGLElBQUksUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyRCxJQUFJLElBQUksR0FBRyxNQUFNLElBQUEscUJBQU8sRUFBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQUMsT0FBTSxHQUFRLEVBQUU7WUFDaEIsTUFBTSxJQUFJLDRCQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0g7QUF6Q0Ysb0JBeUNFIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xyXG5jb25zdCBpc1Rlc3QgPSBwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRDtcclxuY29uc3QgY29uZmlnID0ge1xyXG4gIGNvbnZlcnRFbXB0eVZhbHVlczogdHJ1ZSxcclxuICAuLi4oaXNUZXN0ICYmIHtcclxuICAgIGVuZHBvaW50OiAnbG9jYWxob3N0OjgwMDAnLFxyXG4gICAgc3NsRW5hYmxlZDogZmFsc2UsXHJcbiAgICByZWdpb246ICdsb2NhbC1lbnYnLFxyXG4gIH0pLFxyXG59O1xyXG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KGNvbmZpZyk7XHJcbmNvbnN0IHRhYmxlID0gKGlzVGVzdCkgPyBwcm9jZXNzLmVudi5EWU5BTU9fREJfVEVTVF9UQUJMRSA6IHByb2Nlc3MuZW52LkRZTkFNT19EQl9HQU1FX1RBQkxFO1xyXG5pbXBvcnQgeyBHYW1lRXJyb3IgfSBmcm9tIFwiLi9nYW1lRXJyb3JIYW5kbGVyXCI7XHJcbmltcG9ydCB7IGdldEdhbWUgfSBmcm9tIFwiLi9nYW1lTWFuYWdlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWUgeyBcclxuICAgIC8vRmllbGRzIFxyXG4gICAgdXNlcklEOiBzdHJpbmc7XHJcbiAgICBnYW1lTmFtZTogc3RyaW5nOyAgICAgXHJcbiAgICB5ZWFyUmVsZWFzZWQ/OiBudW1iZXI7XHJcbiAgICBnZW5yZT86IHN0cmluZztcclxuICAgIGNvbnNvbGU/OiBzdHJpbmc7XHJcbiAgICBkZXZlbG9wZXI/OiBzdHJpbmc7XHJcbiAgXHJcbiAgICAvL0NvbnN0cnVjdG9yIFxyXG4gICAgY29uc3RydWN0b3IodXNlcklEOnN0cmluZywgZ2FtZU5hbWU6c3RyaW5nLCB5ZWFyUmVsZWFzZWQ/Om51bWJlciwgZ2VucmU/OnN0cmluZywgY29uc29sZT86c3RyaW5nLCBkZXZlbG9wZXI/OnN0cmluZykgeyBcclxuICAgICAgIHRoaXMudXNlcklEID0gdXNlcklELFxyXG4gICAgICAgdGhpcy5nYW1lTmFtZSA9IGdhbWVOYW1lLFxyXG4gICAgICAgdGhpcy55ZWFyUmVsZWFzZWQgPSB5ZWFyUmVsZWFzZWQsXHJcbiAgICAgICB0aGlzLmdlbnJlID0gZ2VucmUsXHJcbiAgICAgICB0aGlzLmNvbnNvbGUgPSBjb25zb2xlLFxyXG4gICAgICAgdGhpcy5kZXZlbG9wZXIgPSBkZXZlbG9wZXJcclxuICAgIH1cclxuICAgIFxyXG4gICAgYXN5bmMgY3JlYXRlR2FtZSgpOiBQcm9taXNlPEdhbWU+IHtcclxuICAgICAgbGV0IHBhcmFtcyA9IHtcclxuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlLFxyXG4gICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgIHVzZXJJRDogdGhpcy51c2VySUQsXHJcbiAgICAgICAgICBnYW1lTmFtZTogdGhpcy5nYW1lTmFtZSwgICAgICAgICAgXHJcbiAgICAgICAgICBnZW5yZTogdGhpcy5nZW5yZSxcclxuICAgICAgICAgIHllYXJSZWxlYXNlZDogdGhpcy55ZWFyUmVsZWFzZWQsXHJcbiAgICAgICAgICBkZXZlbG9wZXI6IHRoaXMuZGV2ZWxvcGVyLFxyXG4gICAgICAgICAgY29uc29sZTogdGhpcy5jb25zb2xlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBDb25kaXRpb25FeHByZXNzaW9uOiAnYXR0cmlidXRlX25vdF9leGlzdHMoZ2FtZU5hbWUpIEFORCBhdHRyaWJ1dGVfbm90X2V4aXN0cyh1c2VySUQpJ1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZG9jQ2xpZW50LnB1dChwYXJhbXMpLnByb21pc2UoKTtcclxuICAgICAgICBsZXQgZ2FtZSA9IGF3YWl0IGdldEdhbWUodGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGdhbWU7XHJcbiAgICAgIH0gY2F0Y2goZXJyOiBhbnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgR2FtZUVycm9yKGVyci5tZXNzYWdlLCBlcnIuc3RhdHVzQ29kZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuIH0iXX0=
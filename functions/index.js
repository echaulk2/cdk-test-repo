"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeGameData = exports.httpResponse = exports.deleteGameHttpResponse = exports.modifyGameHttpResponse = exports.createGameHttpResponse = exports.listGamesHttpResponse = exports.getGameHttpResponse = void 0;
const AWS = require('aws-sdk');
const game_1 = require("./game");
const gameManager_1 = require("./gameManager");
exports.handler = async (event, context, callback) => {
    const userID = event.requestContext.authorizer.claims['cognito:username'];
    switch (event.path) {
        case ("/getGame"):
            let gameName = { gameName: event.queryStringParameters["gameName"] };
            let getGameData = deserializeGameData(userID, gameName);
            callback(null, await getGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            let listGameData = userID;
            callback(null, await listGamesHttpResponse(listGameData));
            break;
        case ("/createGame"):
            let createGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await createGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await modifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await deleteGameHttpResponse(deleteGameData));
            break;
        default:
            callback(null, httpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};
async function getGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.getGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.getGameHttpResponse = getGameHttpResponse;
async function listGamesHttpResponse(userID) {
    try {
        let response = await (0, gameManager_1.listGames)(userID);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.listGamesHttpResponse = listGamesHttpResponse;
async function createGameHttpResponse(game) {
    try {
        let response = await game.createGame();
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.createGameHttpResponse = createGameHttpResponse;
async function modifyGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.modifyGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.modifyGameHttpResponse = modifyGameHttpResponse;
async function deleteGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.deleteGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.deleteGameHttpResponse = deleteGameHttpResponse;
function httpResponse(data) {
    return {
        statusCode: data.statusCode,
        body: data.body,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
}
exports.httpResponse = httpResponse;
function deserializeGameData(userID, data) {
    return new game_1.Game(userID, data.gameName, data.yearReleased, data.genre, data.console, data.developer);
}
exports.deserializeGameData = deserializeGameData;
//# sourceMappingURL=data:application/json;base64,
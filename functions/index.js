"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Common = require("./shared/common/game");
const CollectionCommon = require("./shared/common/collection");
const HttpResponse = require("./shared/common/httpResponse");
exports.handler = async (event, context, callback) => {
    let userData = {
        userID: event.requestContext.authorizer.claims['cognito:username'],
        email: event.requestContext.authorizer.claims['email']
    };
    switch (event.path) {
        case ("/getGame"):
            let gameName = { gameName: event.queryStringParameters["gameName"] };
            let getGameData = Common.serializeGameData(userData, gameName);
            callback(null, await HttpResponse.getGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            let listGameData = userData;
            callback(null, await HttpResponse.listGamesHttpResponse(listGameData));
            break;
        case ("/createGame"):
            let createGameData = Common.serializeGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.createGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = Common.serializeGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = Common.serializeGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.deleteGameHttpResponse(deleteGameData));
            break;
        case ("/collection/wishlist/"):
            callback(null, await HttpResponse.getWishlistHttpResponse(userData.userID));
            break;
        case ("/collection/wishlist/addGame"):
            let addGameData = CollectionCommon.serializeCollectionData(userData, JSON.parse(event.body), 'Wishlist');
            callback(null, await HttpResponse.addGameToWishlistHttpResponse(addGameData, userData));
            break;
        case ("/collection/wishlist/modifyGame"):
            let modifyWishlistData = CollectionCommon.serializeCollectionData(userData, JSON.parse(event.body), 'Wishlist');
            callback(null, await HttpResponse.modifyGameInWishlistHttpResponse(modifyWishlistData, userData));
            break;
        case ("/collection/wishlist/removeGame"):
            let removeGameData = CollectionCommon.serializeCollectionData(userData, JSON.parse(event.body), 'Wishlist');
            callback(null, await HttpResponse.removeGameFromWishlistHttpResponse(removeGameData, userData));
            break;
        default:
            callback(null, HttpResponse.httpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtDQUErQztBQUMvQywrREFBK0Q7QUFDL0QsNkRBQTZEO0FBRTdELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQVUsRUFBRSxPQUFZLEVBQUUsUUFBYSxFQUFFLEVBQUU7SUFDbEUsSUFBSSxRQUFRLEdBQXlCO1FBQ25DLE1BQU0sRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7UUFDbEUsS0FBSyxFQUFFLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDdkQsQ0FBQztJQUNGLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNsQixLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ2YsSUFBSSxRQUFRLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDckUsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUM5RCxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEUsTUFBTTtRQUNSLEtBQUksQ0FBQyxZQUFZLENBQUM7WUFDaEIsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDO1lBQzVCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN2RSxNQUFNO1FBQ1IsS0FBSSxDQUFDLGFBQWEsQ0FBQztZQUNqQixJQUFJLGNBQWMsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEYsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE1BQU07UUFDUixLQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2pCLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoRixRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDMUUsTUFBTTtRQUNSLEtBQUssQ0FBQyxhQUFhLENBQUM7WUFDbEIsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2hGLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUMxRSxNQUFNO1FBQ1IsS0FBSyxDQUFDLHVCQUF1QixDQUFDO1lBQzVCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUUsTUFBTTtRQUNSLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQztZQUNuQyxJQUFJLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDekcsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQyw2QkFBNkIsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN4RixNQUFNO1FBQ1IsS0FBSyxDQUFDLGlDQUFpQyxDQUFDO1lBQ3RDLElBQUksa0JBQWtCLEdBQUcsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2hILFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUMsZ0NBQWdDLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRyxNQUFNO1FBQ1IsS0FBSyxDQUFDLGlDQUFpQyxDQUFDO1lBQ3RDLElBQUksY0FBYyxHQUFHLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUM1RyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDLGtDQUFrQyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2hHLE1BQU07UUFDUjtZQUNFLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFlBQVksQ0FBQyxFQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztZQUN6RyxNQUFNO0tBQ1A7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBJbnRlcmZhY2VzIGZyb20gXCIuL3NoYXJlZC9pbnRlcmZhY2VzL2ludGVyZmFjZXNcIlxyXG5pbXBvcnQgKiBhcyBDb21tb24gZnJvbSBcIi4vc2hhcmVkL2NvbW1vbi9nYW1lXCI7XHJcbmltcG9ydCAqIGFzIENvbGxlY3Rpb25Db21tb24gZnJvbSBcIi4vc2hhcmVkL2NvbW1vbi9jb2xsZWN0aW9uXCI7XHJcbmltcG9ydCAqIGFzIEh0dHBSZXNwb25zZSBmcm9tIFwiLi9zaGFyZWQvY29tbW9uL2h0dHBSZXNwb25zZVwiO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIGNvbnRleHQ6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4ge1xyXG4gIGxldCB1c2VyRGF0YTogSW50ZXJmYWNlcy5JVXNlckRhdGEgPSB7XHJcbiAgICB1c2VySUQ6IGV2ZW50LnJlcXVlc3RDb250ZXh0LmF1dGhvcml6ZXIuY2xhaW1zWydjb2duaXRvOnVzZXJuYW1lJ10sXHJcbiAgICBlbWFpbDogZXZlbnQucmVxdWVzdENvbnRleHQuYXV0aG9yaXplci5jbGFpbXNbJ2VtYWlsJ11cclxuICB9O1xyXG4gIHN3aXRjaCAoZXZlbnQucGF0aCkge1xyXG4gICAgY2FzZSAoXCIvZ2V0R2FtZVwiKTpcclxuICAgICAgbGV0IGdhbWVOYW1lID0geyBnYW1lTmFtZTogZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzW1wiZ2FtZU5hbWVcIl0gfTtcclxuICAgICAgbGV0IGdldEdhbWVEYXRhID0gQ29tbW9uLnNlcmlhbGl6ZUdhbWVEYXRhKHVzZXJEYXRhLCBnYW1lTmFtZSlcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLmdldEdhbWVIdHRwUmVzcG9uc2UoZ2V0R2FtZURhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlKFwiL2xpc3RHYW1lc1wiKTpcclxuICAgICAgbGV0IGxpc3RHYW1lRGF0YSA9IHVzZXJEYXRhO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UubGlzdEdhbWVzSHR0cFJlc3BvbnNlKGxpc3RHYW1lRGF0YSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UoXCIvY3JlYXRlR2FtZVwiKTpcclxuICAgICAgbGV0IGNyZWF0ZUdhbWVEYXRhID0gQ29tbW9uLnNlcmlhbGl6ZUdhbWVEYXRhKHVzZXJEYXRhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkpKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLmNyZWF0ZUdhbWVIdHRwUmVzcG9uc2UoY3JlYXRlR2FtZURhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlKFwiL21vZGlmeUdhbWVcIik6XHJcbiAgICAgIGxldCBtb2RpZnlHYW1lRGF0YSA9IENvbW1vbi5zZXJpYWxpemVHYW1lRGF0YSh1c2VyRGF0YSwgSlNPTi5wYXJzZShldmVudC5ib2R5KSk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5tb2RpZnlHYW1lSHR0cFJlc3BvbnNlKG1vZGlmeUdhbWVEYXRhKSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAoXCIvZGVsZXRlR2FtZVwiKTpcclxuICAgICAgbGV0IGRlbGV0ZUdhbWVEYXRhID0gQ29tbW9uLnNlcmlhbGl6ZUdhbWVEYXRhKHVzZXJEYXRhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkpKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLmRlbGV0ZUdhbWVIdHRwUmVzcG9uc2UoZGVsZXRlR2FtZURhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L1wiKTpcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLmdldFdpc2hsaXN0SHR0cFJlc3BvbnNlKHVzZXJEYXRhLnVzZXJJRCkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgKFwiL2NvbGxlY3Rpb24vd2lzaGxpc3QvYWRkR2FtZVwiKTpcclxuICAgICAgbGV0IGFkZEdhbWVEYXRhID0gQ29sbGVjdGlvbkNvbW1vbi5zZXJpYWxpemVDb2xsZWN0aW9uRGF0YSh1c2VyRGF0YSwgSlNPTi5wYXJzZShldmVudC5ib2R5KSwgJ1dpc2hsaXN0Jyk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5hZGRHYW1lVG9XaXNobGlzdEh0dHBSZXNwb25zZShhZGRHYW1lRGF0YSwgdXNlckRhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L21vZGlmeUdhbWVcIik6XHJcbiAgICAgIGxldCBtb2RpZnlXaXNobGlzdERhdGEgPSBDb2xsZWN0aW9uQ29tbW9uLnNlcmlhbGl6ZUNvbGxlY3Rpb25EYXRhKHVzZXJEYXRhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkpLCAnV2lzaGxpc3QnKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLm1vZGlmeUdhbWVJbldpc2hsaXN0SHR0cFJlc3BvbnNlKG1vZGlmeVdpc2hsaXN0RGF0YSwgdXNlckRhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L3JlbW92ZUdhbWVcIik6XHJcbiAgICAgIGxldCByZW1vdmVHYW1lRGF0YSA9IENvbGxlY3Rpb25Db21tb24uc2VyaWFsaXplQ29sbGVjdGlvbkRhdGEodXNlckRhdGEsIEpTT04ucGFyc2UoZXZlbnQuYm9keSksICdXaXNobGlzdCcpO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UucmVtb3ZlR2FtZUZyb21XaXNobGlzdEh0dHBSZXNwb25zZShyZW1vdmVHYW1lRGF0YSwgdXNlckRhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBjYWxsYmFjayhudWxsLCBIdHRwUmVzcG9uc2UuaHR0cFJlc3BvbnNlKHtzdGF0dXNDb2RlOiA0MDAsIGJvZHk6IEpTT04uc3RyaW5naWZ5KFwiSW52YWxpZCBvcGVyYXRpb24uXCIpfSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxufSAgXHJcbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeserializeGameData = exports.HttpResponse = exports.DeleteGameHttpResponse = exports.ModifyGameHttpResponse = exports.CreateGameHttpResponse = exports.ListGamesHttpResponse = exports.GetGameHttpResponse = void 0;
const AWS = require('aws-sdk');
const modules_1 = require("./modules");
exports.handler = async (event, context, callback) => {
    switch (event.path) {
        case ("/getGame"):
            let getGameData = DeserializeGameData({ gameName: event.queryStringParameters["gameName"] });
            callback(null, await GetGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            callback(null, await ListGamesHttpResponse());
            break;
        case ("/createGame"):
            let createGameData = DeserializeGameData(JSON.parse(event.body));
            callback(null, await CreateGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = DeserializeGameData(JSON.parse(event.body));
            callback(null, await ModifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = DeserializeGameData(JSON.parse(event.body));
            callback(null, await DeleteGameHttpResponse(deleteGameData));
            break;
        default:
            callback(null, HttpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};
async function GetGameHttpResponse(game) {
    let response = await game.GetGame();
    if (response.code) {
        return ParseDynamoError(response.code);
    }
    else if (response.Item) {
        return HttpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    else {
        return HttpResponse({ statusCode: 404, body: "Unable to get game." });
    }
}
exports.GetGameHttpResponse = GetGameHttpResponse;
async function ListGamesHttpResponse() {
    let response = await (0, modules_1.ListGames)();
    if (response.code) {
        return ParseDynamoError(response.code);
    }
    else if (response.Items) {
        return HttpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    else {
        return HttpResponse({ statusCode: 404, body: "Unable to get list of games." });
    }
}
exports.ListGamesHttpResponse = ListGamesHttpResponse;
async function CreateGameHttpResponse(game) {
    let response = await game.CreateGame();
    if (response.code) {
        return ParseDynamoError(response.code);
    }
    else if (response.Item) {
        return HttpResponse({ statusCode: 201, body: JSON.stringify(response) });
    }
    else {
        return HttpResponse({ statusCode: 404, body: "Unable to create game." });
    }
}
exports.CreateGameHttpResponse = CreateGameHttpResponse;
async function ModifyGameHttpResponse(game) {
    let response = await game.ModifyGame();
    if (response.code) {
        return ParseDynamoError(response.code);
    }
    else if (response.Item) {
        return HttpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
}
exports.ModifyGameHttpResponse = ModifyGameHttpResponse;
async function DeleteGameHttpResponse(game) {
    let response = await game.DeleteGame();
    if (response.code) {
        return ParseDynamoError(response.code);
    }
    else if (response.Item) {
        return HttpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    else {
        return HttpResponse({ statusCode: 404, body: "Unable to delete game." });
    }
}
exports.DeleteGameHttpResponse = DeleteGameHttpResponse;
function HttpResponse(data) {
    return {
        statusCode: data.statusCode,
        body: data.body,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
}
exports.HttpResponse = HttpResponse;
function DeserializeGameData(data) {
    return new modules_1.Game(data.gameName, data.yearReleased, data.genre, data.console, data.developer);
}
exports.DeserializeGameData = DeserializeGameData;
function ParseDynamoError(error) {
    switch (error) {
        case "AccessDeniedException":
            return HttpResponse({ statusCode: 400, body: "Unauthorized request." });
        case "ConditionalCheckFailedException":
            return HttpResponse({ statusCode: 400, body: "Error with the provided condition." });
        default:
            return HttpResponse({ statusCode: 400, body: "Invalid operation." });
    }
}
//# sourceMappingURL=data:application/json;base64,
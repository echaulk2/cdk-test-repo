"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Common = require("./shared/common/game");
const CommonPriceMonitor = require("./shared/common/gamePriceMonitor");
const CommonUser = require("./shared/common/user");
const CommonCollection = require("./shared/common/collection");
const HttpResponse = require("./shared/common/httpResponse");
const wishlist_1 = require("./models/wishlist");
const Config = require("./shared/config/config");
exports.handler = async (event, context, callback) => {
    let userData = {
        userID: `U-${event.requestContext.authorizer.claims['cognito:username']}`,
        email: event.requestContext.authorizer.claims['email']
    };
    const saveParams = {
        TableName: Config.table
    };
    switch (event.path) {
        case ("/createUser"):
            let createUserData = CommonUser.serializeNewUserData(userData);
            callback(null, await HttpResponse.createUserHttpResponse(createUserData));
            break;
        case ("/getGame"):
            let payload = {
                gameID: event === null || event === void 0 ? void 0 : event.queryStringParameters["gameID"]
            };
            let getGameData = Common.serializeExistingGameData(userData, payload);
            callback(null, await HttpResponse.getGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            let listGameData = userData;
            callback(null, await HttpResponse.listGamesHttpResponse(listGameData));
            break;
        case ("/createGame"):
            let createGameData = Common.serializeNewGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.createGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.deleteGameHttpResponse(deleteGameData));
            break;
        case ("/collection/wishlist/"):
            let wishlistID = event === null || event === void 0 ? void 0 : event.queryStringParameters["collectionID"];
            let wishlist = new wishlist_1.Wishlist(userData.userID, wishlistID);
            callback(null, await HttpResponse.getWishlistHttpResponse(wishlist));
            break;
        case ("/collection/wishlist/createWishlist"):
            let createWishlistData = CommonCollection.serializeNewWishlist(userData);
            callback(null, await HttpResponse.createWishlistHttpResponse(createWishlistData));
        case ("/collection/wishlist/addGame"):
            let addGameData = Common.serializeNewGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.addGameToWishlistHttpResponse(addGameData));
            break;
        case ("/collection/wishlist/modifyGame"):
            let modifyWishlistData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyGameInWishlistHttpResponse(modifyWishlistData));
            break;
        case ("/collection/wishlist/removeGame"):
            let removeGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.removeGameFromWishlistHttpResponse(removeGameData));
            break;
        case ("/collection/wishlist/addPriceMonitor"):
            let addPriceMonitor = CommonPriceMonitor.serializeNewGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.addPriceMonitorToWishlistHttpResponse(addPriceMonitor));
            break;
        case ("/collection/wishlist/modifyPriceMonitor"):
            let modifyPriceMonitor = CommonPriceMonitor.serializeExistingGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyPriceMonitorWishlistHttpResponse(modifyPriceMonitor));
            break;
        case ("/collection/wishlist/deletePriceMonitor"):
            let deletePriceMonitor = CommonPriceMonitor.serializeExistingGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.deletePriceMonitorWishlistHttpResponse(deletePriceMonitor));
            break;
        default:
            callback(null, HttpResponse.httpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};
//# sourceMappingURL=data:application/json;base64,
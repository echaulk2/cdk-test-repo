"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Common = require("./shared/common/game");
const CommonPriceMonitor = require("./shared/common/gamePriceMonitor");
const HttpResponse = require("./shared/common/httpResponse");
const wishlist_1 = require("./models/wishlist");
exports.handler = async (event, context, callback) => {
    let userData = {
        userID: event.requestContext.authorizer.claims['cognito:username'],
        email: event.requestContext.authorizer.claims['email']
    };
    switch (event.path) {
        case ("/getGame"):
            let payload = {
                id: event === null || event === void 0 ? void 0 : event.queryStringParameters["id"],
                gameName: event === null || event === void 0 ? void 0 : event.queryStringParameters["gameName"]
            };
            let getGameData = Common.serializeExistingGameData(userData, payload);
            callback(null, await HttpResponse.getGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            let listGameData = userData;
            callback(null, await HttpResponse.listGamesHttpResponse(listGameData));
            break;
        case ("/createGame"):
            let createGameData = Common.serializeNewGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.createGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.deleteGameHttpResponse(deleteGameData));
            break;
        case ("/collection/wishlist/"):
            let wishlistPayload = {
                collectionID: event === null || event === void 0 ? void 0 : event.queryStringParameters["collectionID"],
            };
            let wishlist = new wishlist_1.Wishlist(userData.userID, wishlistPayload.collectionID);
            callback(null, await HttpResponse.getWishlistHttpResponse(wishlist));
            break;
        case ("/collection/wishlist/addGame"):
            let addGamecollectionID = JSON.parse(event.body)['collectionID'];
            let addGameToWishlist = new wishlist_1.Wishlist(userData.userID, addGamecollectionID);
            let addGameData = Common.serializeNewGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.addGameToWishlistHttpResponse(addGameData, addGameToWishlist));
            break;
        case ("/collection/wishlist/modifyGame"):
            let modifyGameCollectionID = JSON.parse(event.body)['collectionID'];
            let modifyGameInWishlist = new wishlist_1.Wishlist(userData.userID, modifyGameCollectionID);
            let modifyWishlistData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyGameInWishlistHttpResponse(modifyWishlistData, modifyGameInWishlist));
            break;
        case ("/collection/wishlist/removeGame"):
            let removeGamecollectionID = JSON.parse(event.body)['collectionID'];
            let removeGameInWishlist = new wishlist_1.Wishlist(userData.userID, removeGamecollectionID);
            let removeGameData = Common.serializeExistingGameData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.removeGameFromWishlistHttpResponse(removeGameData, removeGameInWishlist));
            break;
        case ("/collection/wishlist/addPriceMonitor"):
            let addPriceMonitor = CommonPriceMonitor.serializeGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.addPriceMonitorToWishlistHttpResponse(addPriceMonitor));
            break;
        case ("/collection/wishlist/modifyPriceMonitor"):
            let modifyPriceMonitor = CommonPriceMonitor.serializeGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.modifyPriceMonitorWishlistHttpResponse(modifyPriceMonitor));
            break;
        case ("/collection/wishlist/deletePriceMonitor"):
            let deletePriceMonitor = CommonPriceMonitor.serializeGamePriceMonitorData(userData, JSON.parse(event.body));
            callback(null, await HttpResponse.deletePriceMonitorWishlistHttpResponse(deletePriceMonitor));
            break;
        default:
            callback(null, HttpResponse.httpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtDQUErQztBQUMvQyx1RUFBdUU7QUFDdkUsNkRBQTZEO0FBQzdELGdEQUE2QztBQUU3QyxPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsT0FBWSxFQUFFLFFBQWEsRUFBRSxFQUFFO0lBQ2xFLElBQUksUUFBUSxHQUF5QjtRQUNuQyxNQUFNLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xFLEtBQUssRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ3ZELENBQUM7SUFFRixRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUNmLElBQUksT0FBTyxHQUFHO2dCQUNaLEVBQUUsRUFBRSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUscUJBQXFCLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxRQUFRLEVBQUUsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLHFCQUFxQixDQUFDLFVBQVUsQ0FBQzthQUNuRCxDQUFDO1lBQ0YsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUNyRSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sWUFBWSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEUsTUFBTTtRQUNSLEtBQUksQ0FBQyxZQUFZLENBQUM7WUFDaEIsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDO1lBQzVCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUMscUJBQXFCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN2RSxNQUFN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LHNDQUFzQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUM5RixNQUFNO1FBQ1I7WUFDRSxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekcsTUFBTTtLQUNQO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSW50ZXJmYWNlcyBmcm9tIFwiLi9zaGFyZWQvaW50ZXJmYWNlcy9pbnRlcmZhY2VzXCJcclxuaW1wb3J0ICogYXMgQ29tbW9uIGZyb20gXCIuL3NoYXJlZC9jb21tb24vZ2FtZVwiO1xyXG5pbXBvcnQgKiBhcyBDb21tb25QcmljZU1vbml0b3IgZnJvbSBcIi4vc2hhcmVkL2NvbW1vbi9nYW1lUHJpY2VNb25pdG9yXCI7XHJcbmltcG9ydCAqIGFzIEh0dHBSZXNwb25zZSBmcm9tIFwiLi9zaGFyZWQvY29tbW9uL2h0dHBSZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBXaXNobGlzdCB9IGZyb20gXCIuL21vZGVscy93aXNobGlzdFwiO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIGNvbnRleHQ6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4ge1xyXG4gIGxldCB1c2VyRGF0YTogSW50ZXJmYWNlcy5JVXNlckRhdGEgPSB7XHJcbiAgICB1c2VySUQ6IGV2ZW50LnJlcXVlc3RDb250ZXh0LmF1dGhvcml6ZXIuY2xhaW1zWydjb2duaXRvOnVzZXJuYW1lJ10sXHJcbiAgICBlbWFpbDogZXZlbnQucmVxdWVzdENvbnRleHQuYXV0aG9yaXplci5jbGFpbXNbJ2VtYWlsJ11cclxuICB9O1xyXG5cclxuICBzd2l0Y2ggKGV2ZW50LnBhdGgpIHtcclxuICAgIGNhc2UgKFwiL2dldEdhbWVcIik6XHJcbiAgICAgIGxldCBwYXlsb2FkID0geyBcclxuICAgICAgICBpZDogZXZlbnQ/LnF1ZXJ5U3RyaW5nUGFyYW1ldGVyc1tcImlkXCJdLFxyXG4gICAgICAgIGdhbWVOYW1lOiBldmVudD8ucXVlcnlTdHJpbmdQYXJhbWV0ZXJzW1wiZ2FtZU5hbWVcIl0gXHJcbiAgICAgIH07XHJcbiAgICAgIGxldCBnZXRHYW1lRGF0YSA9IENvbW1vbi5zZXJpYWxpemVFeGlzdGluZ0dhbWVEYXRhKHVzZXJEYXRhLCBwYXlsb2FkKVxyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UuZ2V0R2FtZUh0dHBSZXNwb25zZShnZXRHYW1lRGF0YSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UoXCIvbGlzdEdhbWVzXCIpOlxyXG4gICAgICBsZXQgbGlzdEdhbWVEYXRhID0gdXNlckRhdGE7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5saXN0R2FtZXNIdHRwUmVzcG9uc2UobGlzdEdhbWVEYXRhKSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZShcIi9jcmVhdGVHYW1lXCIpOlxyXG4gICAgICBsZXQgY3JlYXRlR2FtZURhdGEgPSBDb21tb24uc2VyaWFsaXplTmV3R2FtZURhdGEodXNlckRhdGEsIEpTT04ucGFyc2UoZXZlbnQuYm9keSkpO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UuY3JlYXRlR2FtZUh0dHBSZXNwb25zZShjcmVhdGVHYW1lRGF0YSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UoXCIvbW9kaWZ5R2FtZVwiKTpcclxuICAgICAgbGV0IG1vZGlmeUdhbWVEYXRhID0gQ29tbW9uLnNlcmlhbGl6ZUV4aXN0aW5nR2FtZURhdGEodXNlckRhdGEsIEpTT04ucGFyc2UoZXZlbnQuYm9keSkpO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UubW9kaWZ5R2FtZUh0dHBSZXNwb25zZShtb2RpZnlHYW1lRGF0YSkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgKFwiL2RlbGV0ZUdhbWVcIik6XHJcbiAgICAgIGxldCBkZWxldGVHYW1lRGF0YSA9IENvbW1vbi5zZXJpYWxpemVFeGlzdGluZ0dhbWVEYXRhKHVzZXJEYXRhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkpKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLmRlbGV0ZUdhbWVIdHRwUmVzcG9uc2UoZGVsZXRlR2FtZURhdGEpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L1wiKTpcclxuICAgICAgbGV0IHdpc2hsaXN0UGF5bG9hZCA9IHsgXHJcbiAgICAgICAgY29sbGVjdGlvbklEOiBldmVudD8ucXVlcnlTdHJpbmdQYXJhbWV0ZXJzW1wiY29sbGVjdGlvbklEXCJdICxcclxuICAgICAgfTtcclxuICAgICAgbGV0IHdpc2hsaXN0ID0gbmV3IFdpc2hsaXN0KHVzZXJEYXRhLnVzZXJJRCwgd2lzaGxpc3RQYXlsb2FkLmNvbGxlY3Rpb25JRCk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5nZXRXaXNobGlzdEh0dHBSZXNwb25zZSh3aXNobGlzdCkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgKFwiL2NvbGxlY3Rpb24vd2lzaGxpc3QvYWRkR2FtZVwiKTpcclxuICAgICAgbGV0IGFkZEdhbWVjb2xsZWN0aW9uSUQgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpWydjb2xsZWN0aW9uSUQnXTtcclxuICAgICAgbGV0IGFkZEdhbWVUb1dpc2hsaXN0ID0gbmV3IFdpc2hsaXN0KHVzZXJEYXRhLnVzZXJJRCwgYWRkR2FtZWNvbGxlY3Rpb25JRCk7XHJcbiAgICAgIGxldCBhZGRHYW1lRGF0YSA9IENvbW1vbi5zZXJpYWxpemVOZXdHYW1lRGF0YSh1c2VyRGF0YSwgSlNPTi5wYXJzZShldmVudC5ib2R5KSk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5hZGRHYW1lVG9XaXNobGlzdEh0dHBSZXNwb25zZShhZGRHYW1lRGF0YSwgYWRkR2FtZVRvV2lzaGxpc3QpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L21vZGlmeUdhbWVcIik6XHJcbiAgICAgIGxldCBtb2RpZnlHYW1lQ29sbGVjdGlvbklEID0gSlNPTi5wYXJzZShldmVudC5ib2R5KVsnY29sbGVjdGlvbklEJ107XHJcbiAgICAgIGxldCBtb2RpZnlHYW1lSW5XaXNobGlzdCA9IG5ldyBXaXNobGlzdCh1c2VyRGF0YS51c2VySUQsIG1vZGlmeUdhbWVDb2xsZWN0aW9uSUQpO1xyXG4gICAgICBsZXQgbW9kaWZ5V2lzaGxpc3REYXRhID0gQ29tbW9uLnNlcmlhbGl6ZUV4aXN0aW5nR2FtZURhdGEodXNlckRhdGEsIEpTT04ucGFyc2UoZXZlbnQuYm9keSkpO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UubW9kaWZ5R2FtZUluV2lzaGxpc3RIdHRwUmVzcG9uc2UobW9kaWZ5V2lzaGxpc3REYXRhLCBtb2RpZnlHYW1lSW5XaXNobGlzdCkpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgKFwiL2NvbGxlY3Rpb24vd2lzaGxpc3QvcmVtb3ZlR2FtZVwiKTpcclxuICAgICAgbGV0IHJlbW92ZUdhbWVjb2xsZWN0aW9uSUQgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpWydjb2xsZWN0aW9uSUQnXTtcclxuICAgICAgbGV0IHJlbW92ZUdhbWVJbldpc2hsaXN0ID0gbmV3IFdpc2hsaXN0KHVzZXJEYXRhLnVzZXJJRCwgcmVtb3ZlR2FtZWNvbGxlY3Rpb25JRCk7XHJcbiAgICAgIGxldCByZW1vdmVHYW1lRGF0YSA9IENvbW1vbi5zZXJpYWxpemVFeGlzdGluZ0dhbWVEYXRhKHVzZXJEYXRhLCBKU09OLnBhcnNlKGV2ZW50LmJvZHkpKTtcclxuICAgICAgY2FsbGJhY2sobnVsbCwgYXdhaXQgSHR0cFJlc3BvbnNlLnJlbW92ZUdhbWVGcm9tV2lzaGxpc3RIdHRwUmVzcG9uc2UocmVtb3ZlR2FtZURhdGEsIHJlbW92ZUdhbWVJbldpc2hsaXN0KSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAoXCIvY29sbGVjdGlvbi93aXNobGlzdC9hZGRQcmljZU1vbml0b3JcIik6XHJcbiAgICAgIGxldCBhZGRQcmljZU1vbml0b3IgPSBDb21tb25QcmljZU1vbml0b3Iuc2VyaWFsaXplR2FtZVByaWNlTW9uaXRvckRhdGEodXNlckRhdGEsIEpTT04ucGFyc2UoZXZlbnQuYm9keSkpO1xyXG4gICAgICBjYWxsYmFjayhudWxsLCBhd2FpdCBIdHRwUmVzcG9uc2UuYWRkUHJpY2VNb25pdG9yVG9XaXNobGlzdEh0dHBSZXNwb25zZShhZGRQcmljZU1vbml0b3IpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L21vZGlmeVByaWNlTW9uaXRvclwiKTpcclxuICAgICAgbGV0IG1vZGlmeVByaWNlTW9uaXRvciA9IENvbW1vblByaWNlTW9uaXRvci5zZXJpYWxpemVHYW1lUHJpY2VNb25pdG9yRGF0YSh1c2VyRGF0YSwgSlNPTi5wYXJzZShldmVudC5ib2R5KSk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5tb2RpZnlQcmljZU1vbml0b3JXaXNobGlzdEh0dHBSZXNwb25zZShtb2RpZnlQcmljZU1vbml0b3IpKTtcclxuICAgICAgYnJlYWs7ICAgICAgXHJcbiAgICBjYXNlIChcIi9jb2xsZWN0aW9uL3dpc2hsaXN0L2RlbGV0ZVByaWNlTW9uaXRvclwiKTpcclxuICAgICAgbGV0IGRlbGV0ZVByaWNlTW9uaXRvciA9IENvbW1vblByaWNlTW9uaXRvci5zZXJpYWxpemVHYW1lUHJpY2VNb25pdG9yRGF0YSh1c2VyRGF0YSwgSlNPTi5wYXJzZShldmVudC5ib2R5KSk7XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIGF3YWl0IEh0dHBSZXNwb25zZS5kZWxldGVQcmljZU1vbml0b3JXaXNobGlzdEh0dHBSZXNwb25zZShkZWxldGVQcmljZU1vbml0b3IpKTtcclxuICAgICAgYnJlYWs7ICAgICAgICBcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGNhbGxiYWNrKG51bGwsIEh0dHBSZXNwb25zZS5odHRwUmVzcG9uc2Uoe3N0YXR1c0NvZGU6IDQwMCwgYm9keTogSlNPTi5zdHJpbmdpZnkoXCJJbnZhbGlkIG9wZXJhdGlvbi5cIil9KSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59ICBcclxuIl19
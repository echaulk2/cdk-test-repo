"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeCollectionData = exports.deserializeGameData = exports.httpResponse = exports.removeGameFromWishlist = exports.addGameToWishlist = exports.getWishlistHttpResponse = exports.createWishlistHttpResponse = exports.deleteGameHttpResponse = exports.modifyGameHttpResponse = exports.createGameHttpResponse = exports.listGamesHttpResponse = exports.getGameHttpResponse = void 0;
const AWS = require('aws-sdk');
const game_1 = require("./game");
const gameManager_1 = require("./gameManager");
const collection_1 = require("./collection");
const collectionManager_1 = require("./collectionManager");
exports.handler = async (event, context, callback) => {
    const userID = event.requestContext.authorizer.claims['cognito:username'];
    switch (event.path) {
        case ("/getGame"):
            let gameName = { gameName: event.queryStringParameters["gameName"] };
            let getGameData = deserializeGameData(userID, gameName);
            callback(null, await getGameHttpResponse(getGameData));
            break;
        case ("/listGames"):
            let listGameData = userID;
            callback(null, await listGamesHttpResponse(listGameData));
            break;
        case ("/createGame"):
            let createGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await createGameHttpResponse(createGameData));
            break;
        case ("/modifyGame"):
            let modifyGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await modifyGameHttpResponse(modifyGameData));
            break;
        case ("/deleteGame"):
            let deleteGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await deleteGameHttpResponse(deleteGameData));
            break;
        case ("/collection/wishlist/createWishlist"):
            callback(null, await createWishlistHttpResponse(userID));
            break;
        case ("/collection/wishlist/getWishlist"):
            callback(null, await getWishlistHttpResponse(userID));
            break;
        case ("/collection/wishlist/addGame"):
            let addGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await addGameToWishlist(addGameData));
            break;
        case ("/collection/wishlist/removeGame"):
            let removeGameData = deserializeGameData(userID, JSON.parse(event.body));
            callback(null, await removeGameFromWishlist(removeGameData));
            break;
        default:
            callback(null, httpResponse({ statusCode: 400, body: JSON.stringify("Invalid operation.") }));
            break;
    }
};

async function getGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.getGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.getGameHttpResponse = getGameHttpResponse;
async function listGamesHttpResponse(userID) {
    try {
        let response = await (0, gameManager_1.listGames)(userID);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.listGamesHttpResponse = listGamesHttpResponse;
async function createGameHttpResponse(game) {
    try {
        let response = await game.createGame();
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.createGameHttpResponse = createGameHttpResponse;
async function modifyGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.modifyGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.modifyGameHttpResponse = modifyGameHttpResponse;
async function deleteGameHttpResponse(game) {
    try {
        let response = await (0, gameManager_1.deleteGame)(game);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.deleteGameHttpResponse = deleteGameHttpResponse;
async function createWishlistHttpResponse(userID) {
    try {
        let wishlist = new collection_1.Collection(userID, 'wishlist');
        let response = await wishlist.createCollection();
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.createWishlistHttpResponse = createWishlistHttpResponse;
async function getWishlistHttpResponse(userID) {
    try {
        let response = await (0, collectionManager_1.getCollection)(userID, "wishlist");
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.getWishlistHttpResponse = getWishlistHttpResponse;
async function addGameToWishlist(game) {
    try {
        let wishlist = await (0, collectionManager_1.getCollection)(game.userID, 'wishlist');
        let response = await (0, collectionManager_1.addGameToCollection)(game, wishlist);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.addGameToWishlist = addGameToWishlist;
async function removeGameFromWishlist(game) {
    try {
        let wishlist = await (0, collectionManager_1.getCollection)(game.userID, 'wishlist');
        let response = await (0, collectionManager_1.removeGameFromCollection)(game, wishlist);
        return httpResponse({ statusCode: 200, body: JSON.stringify(response) });
    }
    catch (err) {
        return httpResponse({ statusCode: err.statusCode, body: err.message });
    }
}
exports.removeGameFromWishlist = removeGameFromWishlist;
function httpResponse(data) {
    return {
        statusCode: data.statusCode,
        body: data.body,
        headers: {
            'Access-Control-Allow-Origin': '*'
        }
    };
}
exports.httpResponse = httpResponse;
function deserializeGameData(userID, data) {
    return new game_1.Game(userID, data.gameName, data === null || data === void 0 ? void 0 : data.yearReleased, data === null || data === void 0 ? void 0 : data.genre, data === null || data === void 0 ? void 0 : data.console, data === null || data === void 0 ? void 0 : data.developer);
}
exports.deserializeGameData = deserializeGameData;
function deserializeCollectionData(userID, collectionType) {
    return new collection_1.Collection(userID, collectionType);
}
exports.deserializeCollectionData = deserializeCollectionData;
//# sourceMappingURL=data:application/json;base64,